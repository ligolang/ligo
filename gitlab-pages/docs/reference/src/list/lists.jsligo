let xs : list<int> = list([1, 2, 3]);

let length : nat = List.length (xs);
let size : nat = List.size (xs);
let head_opt : option<int>  = List.head_opt (xs);
let tail_opt : option<list<int>> = List.tail_opt (xs);
let iter_op = (l: list<int>): unit => {
  let predicate = (i: int): unit => assert(i > 3);
  List.iter(predicate, l);
};
let larger_list: list<int> = list([1, 2, 3]);

let increment = (i : int): int => i + 1;

// Creates a new list with all elements incremented by 1
let plus_one : list<int> = List.map(increment, larger_list);
let my_list : list<int> = list([1, 2, 3]);

let sum_right = ([i, result]: [int, int]): int => result + i;

let sum_of_elements : int = List.fold_right (sum_right, my_list, 0);