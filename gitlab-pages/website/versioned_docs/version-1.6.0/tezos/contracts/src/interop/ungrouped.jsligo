type animal =
@layout("comb")
| ["Elephant"]
| ["Dog"]
| ["Cat"];
type artist =
@layout("comb")
{
  genre : string,
  since : timestamp,
  name  : string
};
type w_and_v = michelson_pair<[int, "w", nat, "v"]>;
type x_and = michelson_pair<[string, "x", w_and_v, "other"]>;
type y_or = michelson_or<[unit, "y", x_and, "other"]>;
type z_or = michelson_or<[unit, "z", y_or, "other"]>;
let z : z_or = M_left(unit);

let y_1 : y_or = M_left(unit);
let y : z_or = M_right(y_1);

let x_pair = ["foo", [2, 3n]];
let x_1 : y_or = M_right (x_pair);
let x : z_or = M_right (y_1);
type storage = int;

type parameter =
   ["Left", int]
 | ["Right", int];

let main = (p: parameter, x: storage): [list<operation>, storage] =>
  [list ([]), match(p) {
    when(Left(i)): x - i;
    when(Right(i)): x + i
   }
  ];
