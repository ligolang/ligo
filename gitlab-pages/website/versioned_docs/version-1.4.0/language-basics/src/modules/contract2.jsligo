interface FA0_INTF {
  type storage;
  @entry const add : (s : int, k : storage) => [list<operation>, storage];
}
namespace FA0 implements FA0_INTF {
  type storage = int;
  @entry const add = (s : int, k : int) : [list<operation>, int] => [list([]), s + k];
  @entry const extra = (s : int, k : int) : [list<operation>, int] => [list([]), s - k];
}
interface FABase_INTF {
  type t;
};

interface FA0_INTF extends FABase_INTF {
  @entry const transfer : (_u : unit, s : t) => [list<operation>, t];
};

interface FA0Ext_INTF extends FA0_INTF {
  @entry const transfer1 : (_u : unit, s : t) => [list<operation>, t];
};

interface FA1_INTF extends FABase_INTF {
  @entry const transfer2 : (_u : unit, s : t) => [list<operation>, t];
};
interface FAAll_INTF extends FA0Ext_INTF, FA1_INTF {
  @entry const transfer3 : (_u : unit, s : t) => [list<operation>, t];
  @view const v1 : (_u : unit, s : t) => t;
  @entry const opt_val? : (i : int, s : t) => [list<operation>, t];
}
namespace FAAll_wo_opt_val implements FAAll_INTF {
  type t = int;

  @entry const transfer = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];
  @entry const transfer1 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];
  @entry const transfer2 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];
  @entry const transfer3 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];
  @view const v1 = (_u : unit, s : t) : t => s;

  /* "foo", "transfer4" and "v2" are not in "FAAll_INTF", but can
     nevertheless be added here, because "implements" does not filter,
     but only have the compiler check that the fields in the interface
     are implemented. */

  export const foo = (s : t) : t => s;
  @entry const transfer4 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];
  @view const v2 = (_u : unit, s : t) : t => s;
}
