
/* @private */
const proxy_transfer_contract =
  <vt, whole_p>(mk_param : ((ticket:ticket<vt>) => whole_p)) => {
    return (p : [[vt, nat], address]) => (s : unit) => {
    const [[v,amt],dst_addr] = p;
    const ticket = Option.unopt (Tezos.create_ticket (v, amt));
    const tx_param = mk_param (ticket);
    const c : contract<whole_p> =
      Tezos.get_contract_with_error (dst_addr, "Testing proxy: you provided a wrong address") ;
    const op = Tezos.transaction (tx_param, 1mutez, c) ;
    return ([ list([op]), unit ]);
  };
};

/* @private */
const proxy_originate_contract =
  <vt, whole_s, vp>(mk_storage: (ticket:ticket<vt>) => whole_s) =>
  (main: ((p : vp) => (s : whole_s) => [list<operation> , whole_s])) => {
      return (p : [[vt , nat] , option<address>]) => {
        const [v,amt] = p[0] ;
        const ticket = Option.unopt (Tezos.create_ticket (v, amt)) ;
        const init_storage : whole_s = mk_storage (ticket) ;
        const [op,addr] = Tezos.create_contract(main, (None () as option<key_hash>), 0mutez, init_storage) ;
        return ([list([op]), Some(addr)])
  };
};

type proxy_address<v> =  typed_address<[[v,nat] , address] , unit> ;

const init_transfer =
  <vt, whole_p>( mk_param :  (t:ticket<vt>) => whole_p) => {
    const proxy_transfer : (p : [[vt , nat] , address]) => (s : unit) => [list<operation> , unit] =
      proxy_transfer_contract (mk_param)
    ;
    const [taddr_proxy, _, _] = Test.originate (proxy_transfer, unit, 1tez) ;
    return taddr_proxy
  };

const transfer =
  <vt>( [taddr_proxy, info] : [proxy_address<vt> , [[vt , nat] , address]]) => {
    const [ticket_info, dst_addr] = info ;
    return (
      Test.transfer_to_contract(Test.to_contract (taddr_proxy), [ticket_info , dst_addr], 1mutez)
    )
  };

const originate =
  <vt, whole_s, vp>([ ticket_info , mk_storage , contract] : [ [vt , nat] , (t:ticket<vt>) => whole_s, (p: vp) => (s: whole_s) => [list<operation> , whole_s] ]) => {
      const proxy_origination : (_p : [vt , nat]) => (_s : option<address>) => [list<operation> , option<address>] =
        curry(proxy_originate_contract (mk_storage, contract)) ;
      const [taddr_proxy, _, _] = Test.originate (proxy_origination, (None () as option<address> ), 1tez) ;
      Test.transfer_to_contract_exn (Test.to_contract (taddr_proxy), ticket_info, 0tez) ;
      return match (Test.get_storage (taddr_proxy), {
        Some: (addr:address) => {
        (Test.cast_address(addr) as typed_address<vp,whole_s> ) ;
        return addr
        },
        None : (_:unit) => failwith ("internal error")
      });
  };
