// This is mutation-contract.jsligo
type storage = int;

type parameter =
  ["Increment", int]
| ["Decrement", int];

type return_ = [list<operation>, storage];

// Two entrypoints
let add = ([store, delta]: [storage, int]): storage => store + delta;
let sub = ([store, delta]: [storage, int]): storage => store - delta;

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */
let main = ([action, store]: [parameter, storage]) : return_ => {
  return [
    list([]) as list<operation>,    // No operations
    match(action, {
      Increment:(n: int) => add ([store, n]),
      Decrement:(n: int) => sub ([store, n])})
  ]
};

// This continues mutation-contract.jsligo

let originate_and_test = (mainf : ((p: parameter, s: storage) => return_)) : unit => {
  let initial_storage = 5 as int;
  let [taddr, _, _] = Test.originate(mainf, initial_storage, 0tez);
  let contr = Test.to_contract(taddr);
  let r = Test.transfer_to_contract_exn(contr, (Increment (7)), 1mutez);
  assert (Test.get_storage(taddr) == initial_storage + 7);
};

let test = originate_and_test(main);

let test_mutation =
  match(Test.mutation_test_all(main, originate_and_test), list([
    ([]: list<[unit, mutation]>) => unit,
    ([hd,...tl]: list<[unit, mutation]>) => {
                         let ms = list([hd,...tl]);
                         for (const m of ms) {
                           let [_, mutation] = m;
                           let path = Test.save_mutation(".", mutation);
                           Test.log("saved at:");
                           Test.log(path);
                         };
                         failwith ("Some mutation also passes the tests! ^^") }
  ]));
