@entry
const set_storage = (new_storage: int, _old_storage: int): [list<operation>, int] => [list([]), new_storage]

@view
const get_storage = (_: unit, storage: int): int => storage
@entry
const my_entry_point = (_: unit, n: int) : [list<operation>, int] => [list([]), n];
const stuff = {
    x : "foo",
    y : { universe : [42, "life", true] }
};

const part : bool = stuff.y["universe"][2];
const zero: nat = 2n & 1n; // Bitwise and
const two_bytes : bytes = 0x11 & 0x10

const five: nat = 4n | 1n; // Bitwise or
const three_bytes : bytes = 0x11 | 0x10

const three : nat = 2n ^ 1n; // Bitwise xor
const one_byte : bytes = 0x11 ^ 0x10

const four : nat = 2n << 1n // Bitwise left shift
const five_one_two : bytes = 0x0100 << 1n

const one : nat = 2n >> 1n; // Bitwise right shift
const zero_bytes : bytes = 0x01 >> 1n
const force_positive = (key: string, dict: map<string, int>) => {
  return match(Map.find_opt (key, dict)) {
    when(Some(val)): do {
        if (val >= 0) {
            return val;
        } else {
            failwith("Negative value");
        }
    };
    when(None()): failwith("Not found.")
  };
}
type storage = [int, list <int>];
type parameter = list <int>;
type returnx = [list <operation>, storage];

let main = (p : parameter, s : storage) : returnx => {
  let storage = match (p) {
    when([]): s;
    when([hd, ...tl]): [s[0] + hd, tl]
  };
  return [(list([]) as list<operation>), storage];
};