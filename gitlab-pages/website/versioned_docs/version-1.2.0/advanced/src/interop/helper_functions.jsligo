type z_to_v =
  ["Z"]
| ["Y"]
| ["X"]
| ["W"]
| ["V"];

type w_or_v = michelson_or<[unit, "w", unit, "v"]>;
type x_or = michelson_or<[unit, "x", w_or_v, "other"]>;
type y_or = michelson_or<[unit, "y", x_or, "other"]>;
type z_or = michelson_or<[unit, "z", y_or, "other"]>;

type test = {
  z: string,
  y: int,
  x: string,
  w: bool,
  v: int
};

let make_concrete_sum = (r: z_to_v): z_or =>
  match(r) {
    when(Z()): M_left(unit);
    when(Y()): M_right(M_left(unit));
    when(X()): M_right (M_right (M_left(unit)));
    when(W()): M_right (M_right (M_right(M_left(unit))));
    when(V()): M_right (M_right (M_right(M_right(unit))))
  };


let make_concrete_record = (r: test) =>
  [r.z, r.y, r.x, r.w, r.v];

let make_abstract_sum = (z_or: z_or): z_to_v =>
  match(z_or) {
    when(M_left(n)): Z();
    when(M_right(y_or)): match(y_or) {
        when(M_left(n)): Y();
        when(M_right(x_or)): match(x_or) {
            when(M_left(n)): X();
            when(M_right(w_or)): match(w_or) {
                when(M_left(n)): W();
                when(M_right(n)): V()
            }
        }
    }
  };

let make_abstract_record = (z: string, y: int, x: string, w: bool, v: int) =>  ({z,y,x,w,v});