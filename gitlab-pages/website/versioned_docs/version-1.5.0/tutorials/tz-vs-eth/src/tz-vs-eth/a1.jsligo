type storage = { fn : option<((x : int) => int)>, value : int };
type result = [list<operation>, storage];

const call = (fn: option<((x : int) => int)>, value: int) : int => {
  return match(fn) {
    when(Some(f)): f(value);
    when(None()): failwith("Lambda is not set")
  }
};

@entry
const setFunction = (fn : ((v : int) => int), s : storage) : result =>
  [list([]), {...s, fn: Some(fn)}];

@entry
const callFunction = (_u : unit, s : storage) : result =>
  [list([]), {...s, value: call(s.fn, s.value)}];