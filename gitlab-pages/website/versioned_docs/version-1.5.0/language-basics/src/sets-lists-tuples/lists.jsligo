const empty_list: list<int> = list([]);
const my_list = list([1, 2, 2]); // The head is 1, the tail is list([2, 2])
const larger_list = list([5, ...my_list]); // [5,1,2,2]
const head: option<int> = List.head_opt(my_list); // 1
const tail: option<list<int>> = List.tail_opt(my_list); // [2,2]
const assert_all_greater_than_three = (l: list<int>): unit => {
  let predicate = i => assert(i > 3);
  List.iter(predicate, l);
};
const increment = i => i + 1;

// Creates a new list with all elements incremented by 1
const plus_one: list<int> = List.map(increment, larger_list); // [6,2,3,3]
const sum = ([result, i]: [int, int]) => result + i;
const sum_of_elements: int = List.fold (sum, my_list, 0);