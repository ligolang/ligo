contract: ZWSP
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed contract.
At this point, a top-level declaration is expected.

contract: Type ZWSP
##
## Ends in an error in state: 292.
##
## type_decl -> Type . type_name EQ type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## type_decl -> Type . type_name type_vars EQ type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type declaration.
At this point, a new type name is expected.

contract: Type Ident ZWSP
##
## Ends in an error in state: 297.
##
## type_decl -> Type type_name . EQ type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## type_decl -> Type type_name . type_vars EQ type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_name
##

Ill-formed type declaration.
At this point, one of the following is expected:
  * the assignment symbol '=' followed by a type;
  * type parameters (variables) between chevrons ('<', '>') if the
    type is generic.

interactive_expr: LT ZWSP
##
## Ends in an error in state: 38.
##
## chevrons(sep_or_term(type_var,COMMA)) -> LT . sep_or_term(type_var,COMMA) gt [ WILD VBAR UIdent String SHARP ParameterOf LPAR LBRACKET LBRACE Int Ident ES6FUN EQ EIdent Attr ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed generic declaration.
At this point, a type parameter is expected as a variable.

interactive_expr: LT Ident ZWSP
##
## Ends in an error in state: 43.
##
## nsepseq(type_var,COMMA) -> type_var . [ GT ]
## nsepseq(type_var,COMMA) -> type_var . COMMA nsepseq(type_var,COMMA) [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var . COMMA [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var . COMMA nseq(__anonymous_0(type_var,COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_var
##

Ill-formed generic declaration.
At this point, one of the following is expected:
  * a comma ',' followed by another type parameter (variable);
  * a closing chevron '>' if there are no more parameters.

interactive_expr: LT Ident COMMA ZWSP
##
## Ends in an error in state: 44.
##
## nsepseq(type_var,COMMA) -> type_var COMMA . nsepseq(type_var,COMMA) [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var COMMA . [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var COMMA . nseq(__anonymous_0(type_var,COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_var COMMA
##

Ill-formed generic declaration.
At this point, one of the following is expected:
  * another type parameter (variable);
  * a closing chevron '>' if there are no more parameters.

contract: Type Ident EQ ZWSP
##
## Ends in an error in state: 298.
##
## type_decl -> Type type_name EQ . type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_name EQ
##
contract: Type Ident LT GT EQ ZWSP
##
## Ends in an error in state: 301.
##
## type_decl -> Type type_name type_vars EQ . type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_name type_vars EQ
##

Ill-formed type declaration.
At this point, a type is expected.

interactive_expr: ContractOf LPAR UIdent DOT ZWSP
##
## Ends in an error in state: 122.
##
## namespace_path(namespace_name) -> namespace_name DOT . namespace_path(namespace_name) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
## namespace_path(namespace_name) -> namespace_name DOT . namespace_name [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed namespace selection.
At this point, a namespace name is expected.

interactive_expr: ES6FUN LPAR Ident COLON ZWSP
##
## Ends in an error in state: 108.
##
## type_annotation(type_expr) -> COLON . type_expr [ SEMI RPAR RBRACE PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed type annotation.
At this point, a type is expected.

contract: Type Ident LT GT XOR
##
## Ends in an error in state: 300.
##
## type_decl -> Type type_name type_vars . EQ type_expr [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_name type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production gt -> GT
## In state 50, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) gt
## In state 303, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

Ill-formed generic type declaration.
At this point, if the type parameters are complete, the assignment
symbol '=' is expected, followed by a type.

contract: Namespace ZWSP
##
## Ends in an error in state: 583.
##
## namespace_decl -> Namespace . namespace_binder braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## namespace_decl -> Namespace . namespace_binder interface braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Namespace
##

Ill-formed namespace declaration.
At this point, a namespace name is expected.

contract: Namespace UIdent ZWSP
##
## Ends in an error in state: 586.
##
## namespace_decl -> Namespace namespace_binder . braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## namespace_decl -> Namespace namespace_binder . interface braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Namespace namespace_binder
##

Ill-formed namespace declaration.
At this point, one of the following is expected:
  * the keyword 'implements' followed by an interface;
  * a block of statements starting with an opening brace '{'.

contract: Namespace UIdent LBRACE ZWSP
##
## Ends in an error in state: 291.
##
## braces(statements) -> LBRACE . statements RBRACE [ XOR While When WILD Verbatim VBAR UIdent Type True TIMES Switch String SLASH SHARP SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS2 PLUS PARAMS OR Nat Namespace NE Mutez Match MINUS2 MINUS Let LT LPAR LE LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ2 EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed block of statements.
At this point, a statement is expected.

contract: Namespace UIdent LBRACE While ZWSP
##
## Ends in an error in state: 1.
##
## while_stmt(catenable_stmt) -> While . par(while_cond) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While . par(while_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##
contract: Return If LPAR Bytes RPAR While ZWSP
##
## Ends in an error in state: 1081.
##
## while_stmt(closed_non_if_stmt) -> While . par(while_cond) closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While . par(while_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## while_stmt(stmt_not_ending_with_expr) -> While . par(while_cond) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

Ill-formed while-loop.
At this point, the invariant between parentheses is expected.

contract: Namespace UIdent LBRACE While LPAR ZWSP
##
## Ends in an error in state: 2.
##
## par(while_cond) -> LPAR . while_cond RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## par(while_cond) -> LPAR . while_cond PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed while-loop.
At this point, the invariant is expected as a boolean expression.

interactive_expr: PLUS2 ZWSP
##
## Ends in an error in state: 22.
##
## pre_incr_expr -> PLUS2 . WILD [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
## pre_incr_expr -> PLUS2 . Ident [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
## pre_incr_expr -> PLUS2 . EIdent [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## PLUS2
##

Ill-formed increment.
At this point, the incremented variable is expected.

interactive_expr: LPAR ZWSP
##
## Ends in an error in state: 31.
##
## par(expr) -> LPAR . expr RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(expr) -> LPAR . expr PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed parenthesised expression.
At this point, an expression is expected.

interactive_expr: Match ZWSP
##
## Ends in an error in state: 30.
##
## match_expr -> Match . match_subject braces(match_clauses) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## Match
##

Ill-formed pattern matching.
At this point, the matched expression is expected.

contract: Const LBRACKET ZWSP
##
## Ends in an error in state: 649.
##
## brackets(sep_or_term(element(pattern),COMMA)) -> LBRACKET . sep_or_term(element(pattern),COMMA) RBRACKET [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##
interactive_expr: ES6FUN LPAR LBRACKET ZWSP
##
## Ends in an error in state: 68.
##
## brackets(sep_or_term(element(param_pattern),COMMA)) -> LBRACKET . sep_or_term(element(param_pattern),COMMA) RBRACKET [ SEMI RPAR RBRACKET RBRACE PARAMS COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed array pattern.
At this point, a pattern matching the first element is expected.

contract: Const LBRACE ZWSP
##
## Ends in an error in state: 650.
##
## braces(sep_or_term(property_pattern(pattern),property_sep)) -> LBRACE . sep_or_term(property_pattern(pattern),property_sep) RBRACE [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##
interactive_expr: ES6FUN LPAR LBRACE ZWSP
##
## Ends in an error in state: 69.
##
## braces(sep_or_term(property_pattern(param_pattern),property_sep)) -> LBRACE . sep_or_term(property_pattern(param_pattern),property_sep) RBRACE [ SEMI RPAR RBRACKET RBRACE PARAMS COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed object pattern.
At this point, a pattern matching the first property is expected.

contract: Const LBRACE Attr ZWSP
##
## Ends in an error in state: 651.
##
## property_pattern(pattern) -> Attr . property_pattern(pattern) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated property pattern.
At this point, one of the following is expected:
  * another decorator;
  * a property pattern.

contract: Const LBRACE Ident ZWSP
##
## Ends in an error in state: 653.
##
## property_pattern(pattern) -> property_id . [ SEMI RBRACE COMMA ]
## property_pattern(pattern) -> property_id . COLON pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##
interactive_expr: ES6FUN LPAR LBRACE Ident ZWSP
##
## Ends in an error in state: 74.
##
## property_pattern(param_pattern) -> property_id . [ SEMI RBRACE COMMA ]
## property_pattern(param_pattern) -> property_id . COLON param_pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

Ill-formed object pattern.
At this point, one of the following is expected:
  * a colon ':' followed by a pattern matching the property;
  * a property separator (';' or ',');
  * a closing brace '}' if no more properties.

contract: Const LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 654.
##
## property_pattern(pattern) -> property_id COLON . pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id COLON
##
interactive_expr: ES6FUN LPAR LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 75.
##
## property_pattern(param_pattern) -> property_id COLON . param_pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id COLON
##

Ill-formed object pattern.
At this point, a pattern matching the property is expected.

contract: Const Attr ZWSP
##
## Ends in an error in state: 660.
##
## pattern -> Attr . pattern [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Attr
##
interactive_expr: ES6FUN LPAR LBRACE Attr ZWSP
##
## Ends in an error in state: 71.
##
## property_pattern(param_pattern) -> Attr . property_pattern(param_pattern) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated pattern
At this point, one of the following is expected:
  * another decorator;
  * a pattern.

contract: Const LBRACE Ident COLON Bytes ZWSP
##
## Ends in an error in state: 696.
##
## nsepseq(property_pattern(pattern),property_sep) -> property_pattern(pattern) . [ RBRACE ]
## nsepseq(property_pattern(pattern),property_sep) -> property_pattern(pattern) . property_sep nsepseq(property_pattern(pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) . property_sep [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) . property_sep nseq(__anonymous_0(property_pattern(pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(pattern)
##
interactive_expr: ES6FUN LPAR LBRACE Ident COLON Ident ZWSP
##
## Ends in an error in state: 85.
##
## nsepseq(property_pattern(param_pattern),property_sep) -> property_pattern(param_pattern) . [ RBRACE ]
## nsepseq(property_pattern(param_pattern),property_sep) -> property_pattern(param_pattern) . property_sep nsepseq(property_pattern(param_pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) . property_sep [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) . property_sep nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(param_pattern)
##

Ill-formed object pattern.
At this point, one of the following is expected:
  * a property separator (';' or ',');
  * a closing brace '}' if no more properties.

contract: Const LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 697.
##
## nsepseq(property_pattern(pattern),property_sep) -> property_pattern(pattern) property_sep . nsepseq(property_pattern(pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) property_sep . [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) property_sep . nseq(__anonymous_0(property_pattern(pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(pattern) property_sep
##
interactive_expr: ES6FUN LPAR LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 88.
##
## nsepseq(property_pattern(param_pattern),property_sep) -> property_pattern(param_pattern) property_sep . nsepseq(property_pattern(param_pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) property_sep . [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) property_sep . nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(param_pattern) property_sep
##

Ill-formed object pattern.
At this point, one of the following is expected:
  * a property pattern;
  * a closing brace '}' if no more properties.

contract: Const LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 703.
##
## element(pattern) -> ELLIPSIS . pattern [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##
interactive_expr: ES6FUN LPAR LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 94.
##
## element(param_pattern) -> ELLIPSIS . param_pattern [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed array pattern.
At this point, a pattern matching the rest of the array is expected.

contract: Const LBRACKET Bytes ZWSP
##
## Ends in an error in state: 711.
##
## nsepseq(element(pattern),COMMA) -> element(pattern) . [ RBRACKET ]
## nsepseq(element(pattern),COMMA) -> element(pattern) . COMMA nsepseq(element(pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(element(pattern),COMMA)) -> element(pattern) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(element(pattern),COMMA)) -> element(pattern) . COMMA nseq(__anonymous_0(element(pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## element(pattern)
##
interactive_expr: ES6FUN LPAR LBRACKET Ident ZWSP
##
## Ends in an error in state: 102.
##
## nsepseq(element(param_pattern),COMMA) -> element(param_pattern) . [ RBRACKET ]
## nsepseq(element(param_pattern),COMMA) -> element(param_pattern) . COMMA nsepseq(element(param_pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(element(param_pattern),COMMA)) -> element(param_pattern) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(element(param_pattern),COMMA)) -> element(param_pattern) . COMMA nseq(__anonymous_0(element(param_pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## element(param_pattern)
##

Ill-formed array pattern.
At this point, one of following is expected:
  * a comma ',' followed by another element pattern;
  * a closing bracket ']' if no more elements.

contract: Const LBRACKET Bytes COMMA ZWSP
##
## Ends in an error in state: 712.
##
## nsepseq(element(pattern),COMMA) -> element(pattern) COMMA . nsepseq(element(pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(element(pattern),COMMA)) -> element(pattern) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(element(pattern),COMMA)) -> element(pattern) COMMA . nseq(__anonymous_0(element(pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## element(pattern) COMMA
##
interactive_expr: ES6FUN LPAR LBRACKET Ident COMMA ZWSP
##
## Ends in an error in state: 103.
##
## nsepseq(element(param_pattern),COMMA) -> element(param_pattern) COMMA . nsepseq(element(param_pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(element(param_pattern),COMMA)) -> element(param_pattern) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(element(param_pattern),COMMA)) -> element(param_pattern) COMMA . nseq(__anonymous_0(element(param_pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## element(param_pattern) COMMA
##

Ill-formed array pattern.
At this point, one of the following is expected:
  * a pattern matching an element;
  * a closing bracket ']' if no more elements.

interactive_expr: MINUS2 ZWSP
##
## Ends in an error in state: 32.
##
## pre_decr_expr -> MINUS2 . WILD [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
## pre_decr_expr -> MINUS2 . Ident [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
## pre_decr_expr -> MINUS2 . EIdent [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## MINUS2
##

Ill-formed decrement.
At this point, the decremented variable is expected.

interactive_expr: LBRACKET ZWSP
##
## Ends in an error in state: 37.
##
## brackets(sep_or_term(element(expr),COMMA)) -> LBRACKET . sep_or_term(element(expr),COMMA) RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed array expression.
At this point, the first element is expected.

interactive_expr: LBRACE ZWSP
##
## Ends in an error in state: 54.
##
## braces(sep_or_term(property(expr),property_sep)) -> LBRACE . sep_or_term(property(expr),property_sep) RBRACE [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## braces(update_expr) -> LBRACE . update_expr RBRACE [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed object or object update.
At this point, one of the following is expected:
  * the first property of an object;
  * a rest expression ('...') denoting the object being updated.

interactive_expr: LBRACE ELLIPSIS ZWSP
##
## Ends in an error in state: 60.
##
## update_expr -> ELLIPSIS . expr property_sep updates [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed object update.
At this point, the object to update is expected.

interactive_expr: Function ZWSP
##
## Ends in an error in state: 65.
##
## function_expr -> Function . fun_par_params braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function . fun_par_params ret_type braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function . type_vars fun_par_params braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function . type_vars fun_par_params ret_type braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function
##

Ill-formed function expression.
At this point, one of the following is expected:
  * an opening parenthesis '(' optionally followed by parameters;
  * an opening chevron '<' optionally followed by type parameters.

interactive_expr: ES6FUN LPAR ZWSP
##
## Ends in an error in state: 66.
##
## par(fun_params) -> LPAR . fun_params RPAR [ LBRACE COLON ARROW ]
## par(fun_params) -> LPAR . fun_params PARAMS RPAR [ LBRACE COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function.
At this point, one of the following is expected:
  * the first parameter (variable);
  * a closing parenthesis ')' if no parameters.

interactive_expr: ES6FUN LPAR Ident ZWSP
##
## Ends in an error in state: 107.
##
## fun_param -> param_pattern . type_annotation(type_expr) [ RPAR PARAMS COMMA ]
## fun_param -> param_pattern . [ RPAR PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## param_pattern
##

Ill-formed function parameter.
At this point, one of the following is expected:
  * a comma ',' followed by another parameter;
  * a colon ':' followed by the type of the parameter;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: ES6FUN LPAR PARAMS ZWSP
##
## Ends in an error in state: 282.
##
## par(fun_params) -> LPAR fun_params PARAMS . RPAR [ LBRACE COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR fun_params PARAMS
##

Ill-formed function.
At this point, a closing parenthesis ')' is expected.

interactive_expr: ES6FUN LPAR Ident COLON Ident XOR
##
## Ends in an error in state: 284.
##
## nsepseq(fun_param,COMMA) -> fun_param . [ RPAR PARAMS ]
## nsepseq(fun_param,COMMA) -> fun_param . COMMA nsepseq(fun_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param . COMMA [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param . COMMA nseq(__anonymous_0(fun_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 275, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 276, spurious reduction of production fun_param -> param_pattern type_annotation(type_expr)
##

Ill-formed function.
At this point, if the parameter is complete, one of the following is
expected:
  * a comma ',' followed by another parameter;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: ES6FUN LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 285.
##
## nsepseq(fun_param,COMMA) -> fun_param COMMA . nsepseq(fun_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param COMMA . [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param COMMA . nseq(__anonymous_0(fun_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_param COMMA
##

Ill-formed function.
At this point, one of the following is expected:
  * another parameter;
  * a closing parenthesis ')' otherwise.

interactive_expr: Function LT GT XOR
##
## Ends in an error in state: 288.
##
## function_expr -> Function type_vars . fun_par_params braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function type_vars . fun_par_params ret_type braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production gt -> GT
## In state 50, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) gt
## In state 303, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

Ill-formed function expression.
At this point, an opening parenthesis '(' is expected.

interactive_expr: Function LT GT LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 290.
##
## function_expr -> Function type_vars fun_par_params . braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function type_vars fun_par_params . ret_type braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function type_vars fun_par_params
##
interactive_expr: Function LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 1202.
##
## function_expr -> Function fun_par_params . braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function fun_par_params . ret_type braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_par_params
##

Ill-formed function.
At this point, one of the following is expected:
  * a colon ':' followed by the return type;
  * a block of statements starting with an opening brace '{'.

interactive_expr: LT GT ES6FUN LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 513.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars ES6FUN fun_par_params . ret_type ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params
##
interactive_expr: ES6FUN LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 566.
##
## arrow_fun_expr -> ES6FUN fun_par_params . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> ES6FUN fun_par_params . ret_type ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params
##

Ill-formed arrow function.
At this point, one of the following is expected:
  * a colon ':' followed by the return type;
  * an arrow '=>' followed by the body.

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON ZWSP
##
## Ends in an error in state: 514.
##
## type_annotation(__anonymous_6) -> COLON . option(ES6FUN) no_par_type_expr [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##
interactive_expr: ES6FUN LPAR PARAMS RPAR COLON ES6FUN ZWSP
##
## Ends in an error in state: 516.
##
## type_annotation(__anonymous_6) -> COLON option(ES6FUN) . no_par_type_expr [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## COLON option(ES6FUN)
##

Ill-formed function.
At this point, a type (without parentheses) is expected.

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON LBRACKET ZWSP
##
## Ends in an error in state: 517.
##
## brackets(type_elements) -> LBRACKET . type_elements RBRACKET [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed array type.
At this point, the type of the first element is expected.

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON Attr ZWSP
##
## Ends in an error in state: 518.
##
## attr_type -> Attr . par(type_expr) [ LBRACE ARROW ]
## attr_type -> Attr . no_par_type_expr [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated type.
At this point, one of the following is expected:
  * another decorator;
  * a type.

interactive_expr: Function LT GT LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 1199.
##
## function_expr -> Function type_vars fun_par_params ret_type . braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function type_vars fun_par_params ret_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 519, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 522, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
##
interactive_expr: Function LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 1203.
##
## function_expr -> Function fun_par_params ret_type . braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_par_params ret_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 519, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 522, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
##

Ill-formed function expression.
At this point, if the return type is complete, a block of statements
is expected to start with an opening brace '{'.

interactive_expr: ES6FUN ZWSP
##
## Ends in an error in state: 307.
##
## arrow_fun_expr -> ES6FUN . fun_par_params ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> ES6FUN . fun_par_params ret_type ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> ES6FUN . WILD ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> ES6FUN . Ident ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> ES6FUN . EIdent ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##
interactive_expr: LT GT XOR
##
## Ends in an error in state: 368.
##
## arrow_fun_expr -> type_vars . ES6FUN fun_par_params ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars . ES6FUN fun_par_params ret_type ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars . ES6FUN WILD ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars . ES6FUN Ident ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars . ES6FUN EIdent ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production gt -> GT
## In state 50, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) gt
## In state 303, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##
interactive_expr: LT GT ES6FUN ZWSP
##
## Ends in an error in state: 369.
##
## arrow_fun_expr -> type_vars ES6FUN . fun_par_params ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars ES6FUN . fun_par_params ret_type ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars ES6FUN . WILD ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars ES6FUN . Ident ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars ES6FUN . EIdent ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN
##

Ill-formed arrow function.
At this point, one of the following is expected:
  * an opening parenthesis '(' optionally followed by parameters;
  * a single parameter (variable).

interactive_expr: ES6FUN Ident ZWSP
##
## Ends in an error in state: 560.
##
## arrow_fun_expr -> ES6FUN Ident . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##
interactive_expr: LT GT ES6FUN Ident ZWSP
##
## Ends in an error in state: 507.
##
## arrow_fun_expr -> type_vars ES6FUN Ident . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN Ident
##
interactive_expr: ES6FUN WILD ZWSP
##
## Ends in an error in state: 308.
##
## arrow_fun_expr -> ES6FUN WILD . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN WILD
##
interactive_expr: LT GT ES6FUN WILD ZWSP
##
## Ends in an error in state: 370.
##
## arrow_fun_expr -> type_vars ES6FUN WILD . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN WILD
##
interactive_expr: LT GT ES6FUN EIdent ZWSP
##
## Ends in an error in state: 510.
##
## arrow_fun_expr -> type_vars ES6FUN EIdent . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN EIdent
##
interactive_expr: ES6FUN EIdent ZWSP
##
## Ends in an error in state: 563.
##
## arrow_fun_expr -> ES6FUN EIdent . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN EIdent
##

Ill-formed arrow function.
At this point, an arrow '=>' is expected.

interactive_expr: ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 561.
##
## arrow_fun_expr -> ES6FUN Ident ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident ARROW
##
interactive_expr: LT GT ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 508.
##
## arrow_fun_expr -> type_vars ES6FUN Ident ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN Ident ARROW
##
interactive_expr: LT GT ES6FUN LPAR RPAR COLON Ident ARROW ZWSP
##
## Ends in an error in state: 524.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params ret_type ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params ret_type ARROW
##
interactive_expr: ES6FUN LPAR RPAR COLON Ident ARROW ZWSP
##
## Ends in an error in state: 570.
##
## arrow_fun_expr -> ES6FUN fun_par_params ret_type ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params ret_type ARROW
##
interactive_expr: LT GT ES6FUN LPAR PARAMS RPAR ARROW ZWSP
##
## Ends in an error in state: 520.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params ARROW
##
interactive_expr: ES6FUN LPAR PARAMS RPAR ARROW ZWSP
##
## Ends in an error in state: 567.
##
## arrow_fun_expr -> ES6FUN fun_par_params ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params ARROW
##
interactive_expr: ES6FUN WILD ARROW ZWSP
##
## Ends in an error in state: 309.
##
## arrow_fun_expr -> ES6FUN WILD ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN WILD ARROW
##
interactive_expr: LT GT ES6FUN WILD ARROW ZWSP
##
## Ends in an error in state: 371.
##
## arrow_fun_expr -> type_vars ES6FUN WILD ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN WILD ARROW
##
interactive_expr: LT GT ES6FUN EIdent ARROW ZWSP
##
## Ends in an error in state: 511.
##
## arrow_fun_expr -> type_vars ES6FUN EIdent ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN EIdent ARROW
##
interactive_expr: ES6FUN EIdent ARROW ZWSP
##
## Ends in an error in state: 564.
##
## arrow_fun_expr -> ES6FUN EIdent ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN EIdent ARROW
##

Ill-formed arrow function.
At this point, one of the following is expected:
  * the body as a non-object expression (use parentheses otherwise);
  * a block of statements starting with an opening brace '{'.

interactive_expr: ContractOf ZWSP
##
## Ends in an error in state: 315.
##
## contract_of_expr -> ContractOf . par(namespace_selection) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## ContractOf
##

Ill-formed contract from a namespace.
At this point, an opening parenthesis '(' is expected.

interactive_expr: ContractOf LPAR ZWSP
##
## Ends in an error in state: 316.
##
## par(namespace_selection) -> LPAR . namespace_selection RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(namespace_selection) -> LPAR . namespace_selection PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed contract from a namespace.
At this point, a namespace name is expected.

interactive_expr: ContractOf LPAR UIdent ZWSP
##
## Ends in an error in state: 317.
##
## par(namespace_selection) -> LPAR namespace_selection . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(namespace_selection) -> LPAR namespace_selection . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR namespace_selection
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 121, spurious reduction of production namespace_selection -> namespace_name
##
interactive_expr: ContractOf LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 319.
##
## par(namespace_selection) -> LPAR namespace_selection PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR namespace_selection PARAMS
##

Ill-formed contract from a namespace.
At this point, a closing parenthesis ')' is expected.

interactive_expr: Ident LBRACKET ZWSP
##
## Ends in an error in state: 332.
##
## brackets(Int) -> LBRACKET . Int RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
## brackets(String) -> LBRACKET . String RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed property selection.
At this point, one of the following is expected:
  * an integer denoting the property,
  * a string denoting the property.

interactive_expr: Ident LBRACKET String ZWSP
##
## Ends in an error in state: 333.
##
## brackets(String) -> LBRACKET String . RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET String
##
interactive_expr: Ident LBRACKET Int ZWSP
##
## Ends in an error in state: 335.
##
## brackets(Int) -> LBRACKET Int . RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

Ill-formed property selection.
At this point, a closing bracket ']' is expected.

interactive_expr: Ident DOT ZWSP
##
## Ends in an error in state: 337.
##
## selection -> DOT . property_name [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## DOT
##

Ill-formed property selection.
At this point, a property name is expected.

interactive_expr: UIdent DOT ZWSP
##
## Ends in an error in state: 348.
##
## namespace_path(selected_expr) -> namespace_name DOT . namespace_path(selected_expr) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## namespace_path(selected_expr) -> namespace_name DOT . selected_expr [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed namespace selection.
At this point, one of the following is expected:
  * a namespace name;
  * a string denoting a constructor;
  * an object or array.

interactive_expr: Attr ZWSP
##
## Ends in an error in state: 363.
##
## expr -> Attr . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated expression.
At this point, one of the following is expected:
  * another decorator;
  * an expression.

interactive_expr: Ident REM_EQ ZWSP
##
## Ends in an error in state: 365.
##
## bin_op(var_path,REM_EQ,expr) -> var_path REM_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path REM_EQ
##
interactive_expr: Ident PLUS_EQ ZWSP
##
## Ends in an error in state: 527.
##
## bin_op(var_path,PLUS_EQ,expr) -> var_path PLUS_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path PLUS_EQ
##
interactive_expr: Ident MULT_EQ ZWSP
##
## Ends in an error in state: 529.
##
## bin_op(var_path,MULT_EQ,expr) -> var_path MULT_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path MULT_EQ
##
interactive_expr: Ident MINUS_EQ ZWSP
##
## Ends in an error in state: 531.
##
## bin_op(var_path,MINUS_EQ,expr) -> var_path MINUS_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path MINUS_EQ
##
interactive_expr: Ident EQ ZWSP
##
## Ends in an error in state: 533.
##
## bin_op(var_path,EQ,expr) -> var_path EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path EQ
##
interactive_expr: Ident DIV_EQ ZWSP
##
## Ends in an error in state: 535.
##
## bin_op(var_path,DIV_EQ,expr) -> var_path DIV_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path DIV_EQ
##
interactive_expr: Ident BIT_XOR_EQ ZWSP
##
## Ends in an error in state: 537.
##
## bin_op(var_path,BIT_XOR_EQ,expr) -> var_path BIT_XOR_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_XOR_EQ
##
interactive_expr: Ident BIT_SR_EQ ZWSP
##
## Ends in an error in state: 539.
##
## bin_op(var_path,BIT_SR_EQ,expr) -> var_path BIT_SR_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_SR_EQ
##
interactive_expr: Ident BIT_SL_EQ ZWSP
##
## Ends in an error in state: 541.
##
## bin_op(var_path,BIT_SL_EQ,expr) -> var_path BIT_SL_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_SL_EQ
##
interactive_expr: Ident BIT_OR_EQ ZWSP
##
## Ends in an error in state: 543.
##
## bin_op(var_path,BIT_OR_EQ,expr) -> var_path BIT_OR_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_OR_EQ
##
interactive_expr: Ident BIT_AND_EQ ZWSP
##
## Ends in an error in state: 545.
##
## bin_op(var_path,BIT_AND_EQ,expr) -> var_path BIT_AND_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_AND_EQ
##

Ill-formed assigment.
At this point, the right-hand side is expected as an expression.

interactive_expr: LT GT ES6FUN LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 523.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params ret_type . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params ret_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 519, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 522, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
##
interactive_expr: ES6FUN LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 569.
##
## arrow_fun_expr -> ES6FUN fun_par_params ret_type . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params ret_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 519, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 522, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
##

Ill-formed arrow function.
At this point, if the return type is complete, an arrow '=>' is
expected.

interactive_expr: LBRACE Attr ZWSP
##
## Ends in an error in state: 1208.
##
## property(expr) -> Attr . property(expr) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated property.
At this point, one of the following is expected:
  * another decorator;
  * a property.

interactive_expr: LBRACE Ident ZWSP
##
## Ends in an error in state: 1209.
##
## property(expr) -> property_id . [ SEMI RBRACE COMMA ]
## property(expr) -> property_id . COLON expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

Ill-formed object.
At this point, one of the following is expected:
  * a colon ':' followed by an expression;
  * a property separator (';' or ',') if name punning;
  * a closing brace '}' if no more properties.

interactive_expr: LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 1210.
##
## property(expr) -> property_id COLON . expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id COLON
##

Ill-formed object.
At his point, an expression is expected for the property.

interactive_expr: LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 1216.
##
## nsepseq(property(expr),property_sep) -> property(expr) property_sep . nsepseq(property(expr),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) property_sep . [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) property_sep . nseq(__anonymous_0(property(expr),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property(expr) property_sep
##

Ill-formed object.
At this point, one of the following is expected:
  * a property;
  * a closing brace '}' if no more properties.

interactive_expr: LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 1226.
##
## element(expr) -> ELLIPSIS . expr [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed array.
At this point, and expression denoting an array is expected.

contract: Namespace UIdent LBRACE Switch ZWSP
##
## Ends in an error in state: 304.
##
## switch_stmt -> Switch . par(switch_subject) braces(cases) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

Ill-formed switch.
At this point, an opening parenthesis '(' is expected, followed by an
expression.

contract: Namespace UIdent LBRACE Switch LPAR ZWSP
##
## Ends in an error in state: 305.
##
## par(switch_subject) -> LPAR . switch_subject RPAR [ LBRACE ]
## par(switch_subject) -> LPAR . switch_subject PARAMS RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed switch.
At this point, the expression used to switch is expected.

contract: Let ZWSP
##
## Ends in an error in state: 630.
##
## value_decl -> Let . bindings [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Let
##

Ill-formed value declaration.
At this point, a pattern is expected, e.g. a variable.

contract: Const Bytes ZWSP
##
## Ends in an error in state: 731.
##
## val_binding -> pattern . EQ expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
## val_binding -> pattern . binding_type EQ expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed value declaration.
At this point, one of the following is expected:
  * a colon ':' followed by the type of the value;
  * the assignment symbol '=' followed by an expression.

contract: Const Bytes COLON ZWSP
##
## Ends in an error in state: 734.
##
## type_annotation(__anonymous_2) -> COLON . type_expr [ EQ ]
## type_annotation(__anonymous_2) -> COLON . type_vars type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed type annotation.
At this point, one of the following is expected:
  * a type;
  * an opening chevron '<' followed by type variables if the type is
    generic.

contract: Const Bytes COLON LT GT XOR
##
## Ends in an error in state: 735.
##
## type_annotation(__anonymous_2) -> COLON type_vars . type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production gt -> GT
## In state 50, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) gt
## In state 303, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

Ill-formed generic type annotation.
At this point, if the type variables are complete, a type is expected.

contract: Const Bytes COLON Ident XOR
##
## Ends in an error in state: 739.
##
## val_binding -> pattern binding_type . EQ expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern binding_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 737, spurious reduction of production type_annotation(__anonymous_2) -> COLON type_expr
## In state 738, spurious reduction of production binding_type -> type_annotation(__anonymous_2)
##

Ill-formed value declaration.
At this point, if the type is complete, the assignment symbol '=' is
expected, followed by an expression.

interactive_expr: Bytes WILD
##
## Ends in an error in state: 1297.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##

Ill-formed expression.
At this point, if the expression is complete, the end of the input is
expected.

contract: Bytes LPAR RPAR ZWSP
##
## Ends in an error in state: 1292.
##
## contract -> statements . EOF [ # ]
##
## The known suffix of the stack is as follows:
## statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 417, spurious reduction of production app_expr -> call_expr
## In state 962, spurious reduction of production expr_stmt -> app_expr
## In state 1067, spurious reduction of production non_if_stmt(statement) -> expr_stmt
## In state 990, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1136, spurious reduction of production last_or_more(statement) -> statement
## In state 1141, spurious reduction of production statements -> last_or_more(statement)
##

Ill-formed contract.
At this point, if the statement is complete, one of the following is
expected:
  * a semicolon ';' followed by another statement;
  * a statement;
  * the end of the contract.

contract: Interface ZWSP
##
## Ends in an error in state: 745.
##
## interface_decl -> Interface . interface_name interface_body [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## interface_decl -> Interface . interface_name extends interface_body [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Interface
##

Ill-formed interface declaration.
At this point, the name of the interface is expected.

contract: Interface UIdent ZWSP
##
## Ends in an error in state: 747.
##
## interface_decl -> Interface interface_name . interface_body [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## interface_decl -> Interface interface_name . extends interface_body [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Interface interface_name
##

Ill-formed interface declaration.
At this point, one of the following is expected:
  * an opening brace '{' is expected, followed by entries;
  * the keyword 'extends'.

contract: Interface UIdent LBRACE ZWSP
##
## Ends in an error in state: 588.
##
## braces(interface_entries) -> LBRACE . interface_entries RBRACE [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed interface.
At this point, one of the following is expected:
  * the keyword 'type' to define a type;
  * the keyword 'const' to define a constant;
  * a decorator for the above.

contract: Interface UIdent LBRACE Type ZWSP
##
## Ends in an error in state: 589.
##
## interface_type -> Type . type_name EQ type_expr [ SEMI RBRACE ]
## interface_type -> Type . type_name [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed interface.
At this point, a type name is expected.

contract: Interface UIdent LBRACE Type Ident ZWSP
##
## Ends in an error in state: 590.
##
## interface_type -> Type type_name . EQ type_expr [ SEMI RBRACE ]
## interface_type -> Type type_name . [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Type type_name
##

Ill-formed type entry in interface.
At this point, one of the following is expected:
  * the assignment symbol '=' followed by a type;
  * a semicolon ';' followed by another entry;
  * a closing brace '}' if no more entries.

contract: Interface UIdent LBRACE Type Ident EQ ZWSP
##
## Ends in an error in state: 591.
##
## interface_type -> Type type_name EQ . type_expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Type type_name EQ
##

Ill-formed interface.
At this point, a type is expected.

contract: Interface UIdent LBRACE Const ZWSP
##
## Ends in an error in state: 593.
##
## interface_const -> Const . WILD type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const . Ident type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const . EIdent type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const . WILD QMARK type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const . Ident QMARK type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const . EIdent QMARK type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const
##

Ill-formed interface.
At this point, the name of the constant is expected.

contract: Interface UIdent LBRACE Const Ident ZWSP
##
## Ends in an error in state: 598.
##
## interface_const -> Const Ident . type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const Ident . QMARK type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const Ident
##
contract: Interface UIdent LBRACE Const WILD ZWSP
##
## Ends in an error in state: 594.
##
## interface_const -> Const WILD . type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const WILD . QMARK type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const WILD
##
contract: Interface UIdent LBRACE Const EIdent ZWSP
##
## Ends in an error in state: 602.
##
## interface_const -> Const EIdent . type_annotation(type_expr) [ SEMI RBRACE ]
## interface_const -> Const EIdent . QMARK type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const EIdent
##

Ill-formed interface.
At this point, one of the following is expected:
  * a colon ':', followed by the type of the constant.
  * a question mark '?', marking the item as optional.

contract: Interface UIdent LBRACE Const WILD QMARK ZWSP
##
## Ends in an error in state: 595.
##
## interface_const -> Const WILD QMARK . type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const WILD QMARK
##
contract: Interface UIdent LBRACE Const Ident QMARK ZWSP
##
## Ends in an error in state: 599.
##
## interface_const -> Const Ident QMARK . type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const Ident QMARK
##
contract: Interface UIdent LBRACE Const EIdent QMARK ZWSP
##
## Ends in an error in state: 603.
##
## interface_const -> Const EIdent QMARK . type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const EIdent QMARK
##

Ill-formed interface.
At this point, a colon ':' is expected, followed by the type of the
constant.

contract: Interface UIdent LBRACE Attr ZWSP
##
## Ends in an error in state: 606.
##
## interface_entry -> Attr . interface_entry [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed interface entry.
At this point, one of the following is expected:
  * another decorator for the entry;
  * the entry itself starting with the keyword 'type' or 'const'.

contract: Interface UIdent LBRACE Const Ident COLON Ident XOR
##
## Ends in an error in state: 614.
##
## nsepseq(interface_entry,SEMI) -> interface_entry . [ RBRACE ]
## nsepseq(interface_entry,SEMI) -> interface_entry . SEMI nsepseq(interface_entry,SEMI) [ RBRACE ]
## nseq(__anonymous_0(interface_entry,SEMI)) -> interface_entry . SEMI [ RBRACE ]
## nseq(__anonymous_0(interface_entry,SEMI)) -> interface_entry . SEMI nseq(__anonymous_0(interface_entry,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## interface_entry
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 275, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 601, spurious reduction of production interface_const -> Const Ident type_annotation(type_expr)
## In state 609, spurious reduction of production interface_entry -> interface_const
##

Ill-formed interface.
At this point, if the entry is complete, one of the following is
expected:
  * a semicolon ';' followed by another entry ('type' or 'const');
  * a closing brace '}' if no more entries.

contract: Interface UIdent LBRACE Type Ident SEMI ZWSP
##
## Ends in an error in state: 615.
##
## nsepseq(interface_entry,SEMI) -> interface_entry SEMI . nsepseq(interface_entry,SEMI) [ RBRACE ]
## nseq(__anonymous_0(interface_entry,SEMI)) -> interface_entry SEMI . [ RBRACE ]
## nseq(__anonymous_0(interface_entry,SEMI)) -> interface_entry SEMI . nseq(__anonymous_0(interface_entry,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## interface_entry SEMI
##

Ill-formed interface.
At this point, one of the following is expected:
  * an entry starting with the keyword 'type' or 'const';
  * a closing brace '}' if no more entries.

contract: Import ZWSP
##
## Ends in an error in state: 753.
##
## import_decl -> Import . namespace_name EQ namespace_selection [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
## import_decl -> Import . TIMES As namespace_name From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
## import_decl -> Import . braces(sep_or_term(variable,COMMA)) From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import
##

Ill-formed import declaration.
At this point, one of the following is expected:
  * a namespace name if aliasing a namespace;
  * the symbol '*' to import all entries from a namespace;
  * an opening brace '{' to import a list of entries.

contract: Import TIMES ZWSP
##
## Ends in an error in state: 754.
##
## import_decl -> Import TIMES . As namespace_name From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES
##

Ill-formed import declaration.
At this point, the keyword 'as' is expected.

contract: Import TIMES As ZWSP
##
## Ends in an error in state: 755.
##
## import_decl -> Import TIMES As . namespace_name From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES As
##

Ill-formed import declaration.
At this point, the name of the namespace is expected.

contract: Import TIMES As UIdent ZWSP
##
## Ends in an error in state: 756.
##
## import_decl -> Import TIMES As namespace_name . From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES As namespace_name
##
contract: Import LBRACE RBRACE ZWSP
##
## Ends in an error in state: 781.
##
## import_decl -> Import braces(sep_or_term(variable,COMMA)) . From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import braces(sep_or_term(variable,COMMA))
##

Ill-formed import declaration.
At this point, the keyword 'from' is expected.

contract: Import TIMES As UIdent From ZWSP
##
## Ends in an error in state: 757.
##
## import_decl -> Import TIMES As namespace_name From . file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES As namespace_name From
##
contract: Import LBRACE RBRACE From ZWSP
##
## Ends in an error in state: 782.
##
## import_decl -> Import braces(sep_or_term(variable,COMMA)) From . file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import braces(sep_or_term(variable,COMMA)) From
##

Ill-formed import declaration.
At this point, a file path to a LIGO source is expected as a string.

contract: Import LBRACE ZWSP
##
## Ends in an error in state: 760.
##
## braces(sep_or_term(variable,COMMA)) -> LBRACE . sep_or_term(variable,COMMA) RBRACE [ From ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed import declaration.
At this point, the name of an imported entry (type or constant) is
expected.

contract: Import LBRACE WILD ZWSP
##
## Ends in an error in state: 761.
##
## nsepseq(variable,COMMA) -> WILD . [ RBRACE ]
## nsepseq(variable,COMMA) -> WILD . COMMA nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> WILD . COMMA [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> WILD . COMMA nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## WILD
##
contract: Import LBRACE Ident ZWSP
##
## Ends in an error in state: 763.
##
## nsepseq(variable,COMMA) -> Ident . [ RBRACE ]
## nsepseq(variable,COMMA) -> Ident . COMMA nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident . COMMA [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident . COMMA nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##
contract: Import LBRACE EIdent ZWSP
##
## Ends in an error in state: 765.
##
## nsepseq(variable,COMMA) -> EIdent . [ RBRACE ]
## nsepseq(variable,COMMA) -> EIdent . COMMA nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> EIdent . COMMA [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> EIdent . COMMA nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## EIdent
##

Ill-formed import declaration.
At this point, one of the following is expected:
  * a comma ',' followed by the name of an imported entry;
  * a closing brace '}' if no more imports.

contract: Import LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 764.
##
## nsepseq(variable,COMMA) -> Ident COMMA . nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident COMMA . [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident COMMA . nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##
contract: Import LBRACE EIdent COMMA ZWSP
##
## Ends in an error in state: 766.
##
## nsepseq(variable,COMMA) -> EIdent COMMA . nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> EIdent COMMA . [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> EIdent COMMA . nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## EIdent COMMA
##
contract: Import LBRACE WILD COMMA ZWSP
##
## Ends in an error in state: 762.
##
## nsepseq(variable,COMMA) -> WILD COMMA . nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> WILD COMMA . [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> WILD COMMA . nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## WILD COMMA
##

Ill-formed import declaration.
At this point, one of the following is expected:
  * the name of an imported entry (type or constant);
  * a closing brace '}' if no more imports.

contract: Import UIdent ZWSP
##
## Ends in an error in state: 778.
##
## import_decl -> Import namespace_name . EQ namespace_selection [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import namespace_name
##

Ill-formed import declaration.
At this point, the assignment symbol '=' is expected.

contract: Import UIdent EQ ZWSP
##
## Ends in an error in state: 779.
##
## import_decl -> Import namespace_name EQ . namespace_selection [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import namespace_name EQ
##

Ill-formed import declaration.
At this point, a namespace name is expected.

contract: Namespace UIdent LBRACE If ZWSP
##
## Ends in an error in state: 784.
##
## if_else_stmt(catenable_stmt) -> If . par(if_cond) closed_non_if_stmt Else catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(catenable_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(catenable_stmt) -> If . par(if_cond) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If . par(if_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##
contract: Namespace UIdent LBRACE Return If ZWSP
##
## Ends in an error in state: 1079.
##
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If . par(if_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(stmt_not_ending_with_expr) -> If . par(if_cond) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##
contract: If LPAR Bytes RPAR If ZWSP
##
## Ends in an error in state: 794.
##
## if_else_stmt(catenable_stmt) -> If . par(if_cond) closed_non_if_stmt Else catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(catenable_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(catenable_stmt) -> If . par(if_cond) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If . par(if_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##
contract: Return If LPAR Bytes RPAR If ZWSP
##
## Ends in an error in state: 1083.
##
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If . par(if_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(stmt_not_ending_with_expr) -> If . par(if_cond) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed conditional statement.
At this point, an opening parenthesis '(' is expected, followed by the
condition.

contract: Namespace UIdent LBRACE If LPAR ZWSP
##
## Ends in an error in state: 785.
##
## par(if_cond) -> LPAR . if_cond RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## par(if_cond) -> LPAR . if_cond PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed conditional statement.
At this point, the condition is expected as a boolean expression.

contract: Function ZWSP
##
## Ends in an error in state: 796.
##
## fun_decl -> Function . fun_name option(ES6FUN) par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function . fun_name option(ES6FUN) par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function . fun_name type_vars option(ES6FUN) par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function . fun_name type_vars option(ES6FUN) par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function
##

Ill-formed function declaration.
At this point, the function name is expected.

contract: Function Ident ZWSP
##
## Ends in an error in state: 801.
##
## fun_decl -> Function fun_name . option(ES6FUN) par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name . option(ES6FUN) par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name . type_vars option(ES6FUN) par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name . type_vars option(ES6FUN) par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name
##

Ill-formed function declaration.
At this point, one of the following is expected:
  * an opening parenthesis '(' optionally followed by parameters;
  * an opening chevron '<' optionally followed by type parameters.

contract: Function Ident LT GT XOR
##
## Ends in an error in state: 802.
##
## fun_decl -> Function fun_name type_vars . option(ES6FUN) par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name type_vars . option(ES6FUN) par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production gt -> GT
## In state 50, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) gt
## In state 303, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##
contract: Function Ident LT GT ES6FUN ZWSP
##
## Ends in an error in state: 803.
##
## fun_decl -> Function fun_name type_vars option(ES6FUN) . par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name type_vars option(ES6FUN) . par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars option(ES6FUN)
##
contract: Function Ident ES6FUN ZWSP
##
## Ends in an error in state: 808.
##
## fun_decl -> Function fun_name option(ES6FUN) . par(fun_params) braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name option(ES6FUN) . par(fun_params) ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name option(ES6FUN)
##

Ill-formed function declaration.
At this point, an opening parenthesis '(' is expected.

contract: Function Ident LT GT LPAR RPAR ZWSP
##
## Ends in an error in state: 804.
##
## fun_decl -> Function fun_name type_vars option(ES6FUN) par(fun_params) . braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name type_vars option(ES6FUN) par(fun_params) . ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars option(ES6FUN) par(fun_params)
##
contract: Function Ident LPAR RPAR ZWSP
##
## Ends in an error in state: 809.
##
## fun_decl -> Function fun_name option(ES6FUN) par(fun_params) . braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## fun_decl -> Function fun_name option(ES6FUN) par(fun_params) . ret_type braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name option(ES6FUN) par(fun_params)
##

Ill-formed function declaration.
At this point, one of the following is expected:
  * a colon ':' followed by the return type;
  * the body as a block of statements starting with an opening brace
    '{'.

contract: Function Ident LT GT LPAR RPAR COLON Ident XOR
##
## Ends in an error in state: 805.
##
## fun_decl -> Function fun_name type_vars option(ES6FUN) par(fun_params) ret_type . braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars option(ES6FUN) par(fun_params) ret_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 519, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 522, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
##
contract: Function Ident LPAR RPAR COLON Ident XOR
##
## Ends in an error in state: 810.
##
## fun_decl -> Function fun_name option(ES6FUN) par(fun_params) ret_type . braces(statements) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name option(ES6FUN) par(fun_params) ret_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 519, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 522, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
##

Ill-formed function declaration.
At this point, if the return type is complete, the body is expected as
a block of statements starting with an opening brace '{'.

contract: Namespace UIdent LBRACE For LPAR ZWSP
##
## Ends in an error in state: 814.
##
## par(range_for) -> LPAR . range_for RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## par(range_for) -> LPAR . range_for PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## par(range_of) -> LPAR . range_of RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## par(range_of) -> LPAR . range_of PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed for-loop.
At this point, one of the following is expected:
  * the initialisation as a statement;
  * a semicolon ';' if no initialisation;
  * the keywords 'const' or 'let' followed by a variable.

contract: Namespace UIdent LBRACE For LPAR SEMI ZWSP
##
## Ends in an error in state: 815.
##
## range_for -> SEMI . SEMI [ RPAR PARAMS ]
## range_for -> SEMI . SEMI afterthought [ RPAR PARAMS ]
## range_for -> SEMI . condition SEMI [ RPAR PARAMS ]
## range_for -> SEMI . condition SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI
##

Ill-formed for-loop.
At this point, one of the following is expected:
  * the invariant as a boolean expression;
  * a semicolon ';' if no condition.

contract: Match LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1244.
##
## match_expr -> Match match_subject . braces(match_clauses) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## Match match_subject
##

Ill-formed pattern matching.
At this point, an opening brace '{' is expected.

contract: Match LPAR Bytes RPAR LBRACE ZWSP
##
## Ends in an error in state: 1245.
##
## braces(match_clauses) -> LBRACE . match_clauses RBRACE [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed pattern matching.
At this point, one of the following is expected:
  * the keyword 'when' for a normal clause;
  * the keyword 'default' for the default clause.

contract: Match LPAR Bytes RPAR LBRACE When ZWSP
##
## Ends in an error in state: 1246.
##
## match_clause -> When . par(when_pattern) COLON expr [ When RBRACE Default ]
## match_clause -> When . par(when_pattern) COLON expr SEMI [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When
##

Ill-formed pattern matching.
At this point, a pattern is expected between parentheses.

contract: Match LPAR Bytes RPAR LBRACE When LPAR ZWSP
##
## Ends in an error in state: 1247.
##
## par(when_pattern) -> LPAR . when_pattern RPAR [ COLON ]
## par(when_pattern) -> LPAR . when_pattern PARAMS RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed pattern matching.
At this point, a pattern for the clause is expected.

contract: Match LPAR Bytes RPAR LBRACE When LPAR Bytes ZWSP
##
## Ends in an error in state: 1253.
##
## typed_pattern -> pattern . type_annotation(type_expr) [ RPAR PARAMS ]
## when_pattern -> pattern . [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed pattern matching.
At this point, one of the following is expected:
  * a colon ':' followed by a type for the pattern;
  * a closing parenthesis ')' if the pattern is complete;

contract: Match LPAR Bytes RPAR LBRACE When LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 1250.
##
## par(when_pattern) -> LPAR when_pattern PARAMS . RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR when_pattern PARAMS
##

Ill-formed pattern matching.
At this point, a closing parenthesis ')' is expected.

contract: Match LPAR Bytes RPAR LBRACE When LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1255.
##
## match_clause -> When par(when_pattern) . COLON expr [ When RBRACE Default ]
## match_clause -> When par(when_pattern) . COLON expr SEMI [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When par(when_pattern)
##
contract: Match LPAR Bytes RPAR LBRACE Default ZWSP
##
## Ends in an error in state: 1259.
##
## match_default -> Default . COLON expr [ RBRACE ]
## match_default -> Default . COLON expr SEMI [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default
##

Ill-formed pattern matching.
At this point, a colon ':' is expected, followed by an expression.

contract: Match LPAR Bytes RPAR LBRACE When LPAR Bytes RPAR COLON ZWSP
##
## Ends in an error in state: 1256.
##
## match_clause -> When par(when_pattern) COLON . expr [ When RBRACE Default ]
## match_clause -> When par(when_pattern) COLON . expr SEMI [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When par(when_pattern) COLON
##
contract: Match LPAR Bytes RPAR LBRACE Default COLON ZWSP
##
## Ends in an error in state: 1260.
##
## match_default -> Default COLON . expr [ RBRACE ]
## match_default -> Default COLON . expr SEMI [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

Ill-formed pattern matching.
At this point, the case clause is expected as an expression.

interactive_expr: Bytes As LBRACE ZWSP
##
## Ends in an error in state: 130.
##
## braces(sep_or_term(property_decl,property_sep)) -> LBRACE . sep_or_term(property_decl,property_sep) RBRACE [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed object type.
At this point, one of the following is expected:
  * a property name,
  * an integer denoting the property,
  * a string denoting the property.

interactive_expr: Bytes As LBRACE Ident ZWSP
##
## Ends in an error in state: 132.
##
## property_decl -> property_id . [ SEMI RBRACE COMMA ]
## property_decl -> property_id . type_annotation(type_expr) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

Ill-formed object type.
At this point, one of the following is expected:
  * a property separator (',' or ';');
  * a closing brace '}' if no more properties;
  * a colon ':' followed by the type of the property.

interactive_expr: Bytes As LBRACE Ident COLON Ident XOR
##
## Ends in an error in state: 137.
##
## nsepseq(property_decl,property_sep) -> property_decl . [ RBRACE ]
## nsepseq(property_decl,property_sep) -> property_decl . property_sep nsepseq(property_decl,property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl . property_sep [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl . property_sep nseq(__anonymous_0(property_decl,property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 275, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 133, spurious reduction of production property_decl -> property_id type_annotation(type_expr)
##

Ill-formed object type.
At this point, one of the following is expected:
  * a property separator (';' or ',') followed by another property
    declaration;
  * a closing brace '}' if no more properties.

interactive_expr: Bytes As LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 138.
##
## nsepseq(property_decl,property_sep) -> property_decl property_sep . nsepseq(property_decl,property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl property_sep . [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl property_sep . nseq(__anonymous_0(property_decl,property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_decl property_sep
##

Ill-formed object type.
At this point, one of the following is expected:
  * another property declaration;
  * a closing brace '}' if no more properties.

interactive_expr: Bytes As ParameterOf ZWSP
##
## Ends in an error in state: 118.
##
## parameter_of_type -> ParameterOf . namespace_selection [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ParameterOf
##

Ill-formed parameter of a contract.
At this point, a namespace name is expected.

interactive_expr: Bytes As LPAR ZWSP
##
## Ends in an error in state: 125.
##
## par(type_expr) -> LPAR . type_expr RPAR [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
## par(type_expr) -> LPAR . type_expr PARAMS RPAR [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed parenthesised type.
At this point, a type is expected.

interactive_expr: Bytes As ES6FUN ZWSP
##
## Ends in an error in state: 146.
##
## fun_type -> ES6FUN . fun_type_params ARROW type_expr [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

Ill-formed function type.
At this point, an opening parenthesis '(' is expected.

interactive_expr: Bytes As ES6FUN LPAR ZWSP
##
## Ends in an error in state: 147.
##
## par(sep_or_term(fun_type_param,COMMA)) -> LPAR . sep_or_term(fun_type_param,COMMA) RPAR [ ARROW ]
## par(sep_or_term(fun_type_param,COMMA)) -> LPAR . sep_or_term(fun_type_param,COMMA) PARAMS RPAR [ ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function type.
At this point, one of the following is expected:
  * the first parameter (variable);
  * a closing parenthesis ')' if no parameters.

interactive_expr: Bytes As ES6FUN LPAR Ident ZWSP
##
## Ends in an error in state: 150.
##
## fun_type_param -> Ident . type_annotation(type_expr) [ RPAR PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##
contract: Bytes As ES6FUN LPAR WILD ZWSP
##
## Ends in an error in state: 148.
##
## fun_type_param -> WILD . type_annotation(type_expr) [ RPAR PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## WILD
##
contract: Bytes As ES6FUN LPAR EIdent ZWSP
##
## Ends in an error in state: 152.
##
## fun_type_param -> EIdent . type_annotation(type_expr) [ RPAR PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## EIdent
##

Ill-formed function type.
At this point, a colon ':' is expected, followed by the type of the
parameter.

interactive_expr: Bytes As ES6FUN LPAR PARAMS ZWSP
##
## Ends in an error in state: 156.
##
## par(sep_or_term(fun_type_param,COMMA)) -> LPAR sep_or_term(fun_type_param,COMMA) PARAMS . RPAR [ ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR sep_or_term(fun_type_param,COMMA) PARAMS
##

Ill-formed function type.
At this point, a closing parenthesis ')' is expected.

interactive_expr: Bytes As ES6FUN LPAR Ident COLON Ident XOR
##
## Ends in an error in state: 161.
##
## nsepseq(fun_type_param,COMMA) -> fun_type_param . [ RPAR PARAMS ]
## nsepseq(fun_type_param,COMMA) -> fun_type_param . COMMA nsepseq(fun_type_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param . COMMA [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param . COMMA nseq(__anonymous_0(fun_type_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_type_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 275, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 151, spurious reduction of production fun_type_param -> Ident type_annotation(type_expr)
##

Ill-formed function type.
At this point, if the parameter type is complete, one of the following
is expected:
  * a comma ',' followed by another parameter type;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: Bytes As ES6FUN LPAR Ident COLON Ident COMMA ZWSP
##
## Ends in an error in state: 162.
##
## nsepseq(fun_type_param,COMMA) -> fun_type_param COMMA . nsepseq(fun_type_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param COMMA . [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param COMMA . nseq(__anonymous_0(fun_type_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_type_param COMMA
##

Ill-formed function type.
At this point, one of the following is expected:
  * another parameter as a variable;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: Bytes As ES6FUN LPAR RPAR ZWSP
##
## Ends in an error in state: 166.
##
## fun_type -> ES6FUN fun_type_params . ARROW type_expr [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_type_params
##

Ill-formed function type.
At this point, an arrow '=>' is expected, followed by the return type.

interactive_expr: Bytes As ES6FUN LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 167.
##
## fun_type -> ES6FUN fun_type_params ARROW . type_expr [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_type_params ARROW
##

Ill-formed function type.
At this point, the return type is expected.

interactive_expr: Bytes As Ident LT ZWSP
##
## Ends in an error in state: 175.
##
## chevrons(nsep_or_term(type_ctor_arg,COMMA)) -> LT . nsep_or_term(type_ctor_arg,COMMA) gt [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed generic type.
At this point, a type is expected.

interactive_expr: Bytes As Ident LT Ident XOR
##
## Ends in an error in state: 184.
##
## nsepseq(type_ctor_arg,COMMA) -> type_ctor_arg . [ GT ]
## nsepseq(type_ctor_arg,COMMA) -> type_ctor_arg . COMMA nsepseq(type_ctor_arg,COMMA) [ GT ]
## nseq(__anonymous_0(type_ctor_arg,COMMA)) -> type_ctor_arg . COMMA [ GT ]
## nseq(__anonymous_0(type_ctor_arg,COMMA)) -> type_ctor_arg . COMMA nseq(__anonymous_0(type_ctor_arg,COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_ctor_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 183, spurious reduction of production type_ctor_arg -> type_expr
##

Ill-formed generic type.
At this point, one of the following is expected:
  * a comma ',' followed by another type;
  * a closing chevron '>' if no more arguments.

interactive_expr: Bytes As Ident LT Ident COMMA ZWSP
##
## Ends in an error in state: 185.
##
## nsepseq(type_ctor_arg,COMMA) -> type_ctor_arg COMMA . nsepseq(type_ctor_arg,COMMA) [ GT ]
## nseq(__anonymous_0(type_ctor_arg,COMMA)) -> type_ctor_arg COMMA . [ GT ]
## nseq(__anonymous_0(type_ctor_arg,COMMA)) -> type_ctor_arg COMMA . nseq(__anonymous_0(type_ctor_arg,COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_ctor_arg COMMA
##

Ill-formed generic type.
At his point, one of the following is expected:
  * a type argument as a type;
  * a closing chevron '>' if no more arguments.

interactive_expr: Bytes As LBRACE RBRACE VBAR ZWSP
##
## Ends in an error in state: 194.
##
## nsepseq(object_type,VBAR) -> object_type VBAR . nsepseq(object_type,VBAR) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## object_type VBAR
##

Ill-formed union type.
At this point, an object type is expected.

interactive_expr: Bytes As UIdent DOT ZWSP
##
## Ends in an error in state: 208.
##
## namespace_path(__anonymous_4) -> namespace_name DOT . namespace_path(__anonymous_4) [ LT ]
## namespace_path(__anonymous_4) -> namespace_name DOT . type_ctor [ LT ]
## namespace_path(__anonymous_5) -> namespace_name DOT . namespace_path(__anonymous_5) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
## namespace_path(__anonymous_5) -> namespace_name DOT . type_name [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed selection of a type in a namespace.
At this point, one of the following is expected:
  * a type name;
  * another namespace name.

interactive_expr: Bytes As LPAR Ident XOR
##
## Ends in an error in state: 251.
##
## par(type_expr) -> LPAR type_expr . RPAR [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
## par(type_expr) -> LPAR type_expr . PARAMS RPAR [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
##

Ill-formed parenthesised type.
At this point, if the type is complete, a closing parenthesis ')' is
expected.

interactive_expr: Bytes As LPAR Ident PARAMS ZWSP
##
## Ends in an error in state: 253.
##
## par(type_expr) -> LPAR type_expr PARAMS . RPAR [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr PARAMS
##

Ill-formed parenthesised type.
At this point, a closing parenthesis ')' is expected.

interactive_expr: ES6FUN LPAR RPAR COLON VBAR ZWSP
##
## Ends in an error in state: 273.
##
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type nseq(__anonymous_1(object_type,VBAR)) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed union type.
At this point, an object type is expected to start with an opening
brace '{'.

contract: Switch LPAR Bytes RPAR LBRACE Case Bytes ZWSP
##
## Ends in an error in state: 358.
##
## call_expr -> lambda . arguments [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## lambda
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1182, spurious reduction of production core_expr -> literal_expr
## In state 1184, spurious reduction of production lambda -> core_expr
##

Ill-formed function call.
At this point, the arguments are expected between parentheses.

contract: Bytes LPAR ZWSP
##
## Ends in an error in state: 359.
##
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . nsepseq(argument,COMMA) RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . nsepseq(argument,COMMA) PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function call.
At this point, one of the following is expected:
  * an argument;
  * a closing parenthesis ')' otherwise.

contract: Bytes LPAR PARAMS ZWSP
##
## Ends in an error in state: 361.
##
## par(ioption(nsepseq(argument,COMMA))) -> LPAR PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR PARAMS
##
contract: Bytes LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 550.
##
## par(ioption(nsepseq(argument,COMMA))) -> LPAR nsepseq(argument,COMMA) PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(argument,COMMA) PARAMS
##

Ill-formed function call.
At this point, a closing parenthesis ')' is expected.

interactive_expr: Bytes XOR ZWSP
##
## Ends in an error in state: 409.
##
## bin_op(disj_expr_level,XOR,conj_expr_level) -> disj_expr_level XOR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level XOR
##
interactive_expr: Bytes BIT_AND ZWSP
##
## Ends in an error in state: 413.
##
## bin_op(conj_expr_level,BIT_AND,bit_shift_level) -> conj_expr_level BIT_AND . bit_shift_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BIT_AND
##
interactive_expr: Bytes LT ZWSP
##
## Ends in an error in state: 415.
##
## bin_op(comp_expr_level,LT,add_expr_level) -> comp_expr_level LT . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##
interactive_expr: Bytes OR ZWSP
##
## Ends in an error in state: 499.
##
## bin_op(disj_expr_level,OR,conj_expr_level) -> disj_expr_level OR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level OR
##
interactive_expr: Bytes BIT_XOR ZWSP
##
## Ends in an error in state: 501.
##
## bin_op(disj_expr_level,BIT_XOR,conj_expr_level) -> disj_expr_level BIT_XOR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BIT_XOR
##
interactive_expr: Bytes PLUS ZWSP
##
## Ends in an error in state: 429.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##
interactive_expr: Bytes SLASH ZWSP
##
## Ends in an error in state: 431.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##
interactive_expr: Bytes REM ZWSP
##
## Ends in an error in state: 433.
##
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level REM . unary_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level REM
##
interactive_expr: Bytes MINUS ZWSP
##
## Ends in an error in state: 435.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##
interactive_expr: Bytes LE ZWSP
##
## Ends in an error in state: 437.
##
## bin_op(comp_expr_level,LE,add_expr_level) -> comp_expr_level LE . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##
interactive_expr: Bytes GT XOR
##
## Ends in an error in state: 444.
##
## bin_op(comp_expr_level,gt,add_expr_level) -> comp_expr_level gt . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
## gt2 -> gt . GT [ WILD Verbatim UIdent True String SHARP PLUS2 Nat NOT Mutez Match MINUS2 MINUS LPAR LBRACKET Int Ident False EIdent Do ContractOf Bytes BIT_NOT ]
##
## The known suffix of the stack is as follows:
## comp_expr_level gt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 439, spurious reduction of production gt -> GT
##
interactive_expr: Bytes GT ZWSP EQ ZWSP
##
## Ends in an error in state: 447.
##
## bin_op(comp_expr_level,ge,add_expr_level) -> comp_expr_level ge . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level ge
##
interactive_expr: Bytes GT GT ZWSP
##
## Ends in an error in state: 442.
##
## bin_op(comp_expr_level,gt2,add_expr_level) -> comp_expr_level gt2 . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level gt2
##
interactive_expr: Bytes NE ZWSP
##
## Ends in an error in state: 460.
##
## bin_op(add_expr_level,NE,eq_expr_level) -> add_expr_level NE . eq_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level NE
##
interactive_expr: Bytes EQ2 ZWSP
##
## Ends in an error in state: 462.
##
## bin_op(add_expr_level,EQ2,eq_expr_level) -> add_expr_level EQ2 . eq_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level EQ2
##
interactive_expr: Bytes BIT_SL ZWSP
##
## Ends in an error in state: 450.
##
## bin_op(bit_shift_level,BIT_SL,comp_expr_level) -> bit_shift_level BIT_SL . comp_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## bit_shift_level BIT_SL
##
interactive_expr: Bytes AND ZWSP
##
## Ends in an error in state: 465.
##
## bin_op(conj_expr_level,AND,bit_shift_level) -> conj_expr_level AND . bit_shift_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## conj_expr_level AND
##
interactive_expr: Bytes VBAR ZWSP
##
## Ends in an error in state: 470.
##
## bin_op(disj_expr_level,VBAR,conj_expr_level) -> disj_expr_level VBAR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level VBAR
##
interactive_expr: Bytes TIMES ZWSP
##
## Ends in an error in state: 381.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##
interactive_expr: MINUS ZWSP
##
## Ends in an error in state: 36.
##
## minus_expr -> MINUS . app_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##
interactive_expr: NOT ZWSP
##
## Ends in an error in state: 27.
##
## not_expr -> NOT . app_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## NOT
##
interactive_expr: BIT_NOT ZWSP
##
## Ends in an error in state: 323.
##
## neg_expr -> BIT_NOT . app_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## BIT_NOT
##

Ill-formed expression.
At this point, an expression is expected.

interactive_expr: Bytes As ZWSP
##
## Ends in an error in state: 497.
##
## typed_expr -> app_expr_level As . type_expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## app_expr_level As
##
contract: Bytes QMARK Bytes LPAR RPAR XOR
##
## Ends in an error in state: 889.
##
## typed_expr -> app_expr_level . As type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## app_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 417, spurious reduction of production app_expr -> call_expr
## In state 951, spurious reduction of production app_expr_level -> app_expr
##

Ill-formed typed expression.
At this point, a type is expected.

contract: Bytes LPAR Bytes WILD
##
## Ends in an error in state: 553.
##
## nsepseq(argument,COMMA) -> argument . [ RPAR PARAMS ]
## nsepseq(argument,COMMA) -> argument . COMMA nsepseq(argument,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## argument
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 552, spurious reduction of production argument -> expr
##

Ill-formed function call.
At this point, one of the following is expected:
   * a comma ',' followed by another argument;
   * a closing parenthesis ')' if no more arguments.

contract: Bytes LPAR Bytes COMMA ZWSP
##
## Ends in an error in state: 554.
##
## nsepseq(argument,COMMA) -> argument COMMA . nsepseq(argument,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## argument COMMA
##

Ill-formed function call.
At this point, another argument is expected.

contract: Switch LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 574.
##
## par(switch_subject) -> LPAR switch_subject PARAMS . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR switch_subject PARAMS
##

Ill-formed switch.
At this point, a closing parenthesis ')' is expected.

contract: Switch LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 577.
##
## switch_stmt -> Switch par(switch_subject) . braces(cases) [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Switch par(switch_subject)
##

Ill-formed switch.
At this point, an opening brace '{' is expected, followed by cases.

contract: Switch LPAR Bytes RPAR LBRACE ZWSP
##
## Ends in an error in state: 578.
##
## braces(cases) -> LBRACE . cases RBRACE [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed switch.
At this point, one of the following is expected:
  * the keyword 'case' introducing a new case;
  * the keyword 'default' introducing the default case.

contract: Switch LPAR Bytes RPAR LBRACE Default ZWSP
##
## Ends in an error in state: 579.
##
## switch_default -> Default . COLON [ RBRACE ]
## switch_default -> Default . COLON statements [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default
##

Ill-formed default switch case
At this point, a colon ':' is expected.

contract: Const Bytes EQ Bytes COMMA ZWSP
##
## Ends in an error in state: 730.
##
## nsepseq(val_binding,COMMA) -> val_binding COMMA . nsepseq(val_binding,COMMA) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## val_binding COMMA
##

Ill-formed value declaration.
At this point, a pattern is expected, e.g. a variable.

contract: Switch LPAR Bytes RPAR LBRACE Default COLON ZWSP
##
## Ends in an error in state: 580.
##
## switch_default -> Default COLON . [ RBRACE ]
## switch_default -> Default COLON . statements [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

Ill-formed default switch case
At this point, one of the following is expected:
  * a statement;
  * a closing brace '}' if no more cases.

contract: If LPAR Bytes RPAR While LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 793.
##
## while_stmt(catenable_stmt) -> While par(while_cond) . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## while_stmt(closed_non_if_stmt) -> While par(while_cond) . closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While par(while_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##
contract: Return While LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1078.
##
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While par(while_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## while_stmt(stmt_not_ending_with_expr) -> While par(while_cond) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##
contract: Return If LPAR Bytes RPAR While LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1082.
##
## while_stmt(closed_non_if_stmt) -> While par(while_cond) . closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While par(while_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## while_stmt(stmt_not_ending_with_expr) -> While par(while_cond) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##
contract: While LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1291.
##
## while_stmt(catenable_stmt) -> While par(while_cond) . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While par(while_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##

Ill-formed while-loop.
At this point, the body is expected as a statement.

interactive_expr: LBRACE ELLIPSIS Bytes COMMA ZWSP
##
## Ends in an error in state: 1207.
##
## update_expr -> ELLIPSIS expr property_sep . updates [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS expr property_sep
##

Ill-formed object update.
At this point, property assignments are expected.

contract: LBRACKET Bytes COMMA ZWSP
##
## Ends in an error in state: 1235.
##
## nsepseq(element(expr),COMMA) -> element(expr) COMMA . nsepseq(element(expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(element(expr),COMMA)) -> element(expr) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(element(expr),COMMA)) -> element(expr) COMMA . nseq(__anonymous_0(element(expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## element(expr) COMMA
##

Ill-formed array.
At this point, one of the following is expected:
  * another element;
  * a closing bracket ']' if no more elements.

contract: Match LPAR Bytes RPAR LBRACE When LPAR Bytes RPAR COLON Bytes WILD
##
## Ends in an error in state: 1257.
##
## match_clause -> When par(when_pattern) COLON expr . [ When RBRACE Default ]
## match_clause -> When par(when_pattern) COLON expr . SEMI [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When par(when_pattern) COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##

Ill-formed pattern matching.
At this point, if the clause is complete, one of the following is
expected:
  * the keyword 'when' to introduce a new clause;
  * the keyword 'default' to introduce the default clause;
  * a closing brace '}' if no more clauses.

contract: Match LPAR Bytes RPAR LBRACE When LPAR UIdent COLON Ident XOR
##
## Ends in an error in state: 1248.
##
## par(when_pattern) -> LPAR when_pattern . RPAR [ COLON ]
## par(when_pattern) -> LPAR when_pattern . PARAMS RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR when_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 275, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 1254, spurious reduction of production typed_pattern -> pattern type_annotation(type_expr)
## In state 1252, spurious reduction of production when_pattern -> typed_pattern
##

Ill-formed pattern matching.
At this point, a closing parenthesis ')' is expected.

contract: LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 1241.
##
## par(expr) -> LPAR expr PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR expr PARAMS
##

Ill-formed parenthesised expression.
At this point, if the expression is complete, a closing parenthesis
')' is expected.

contract: UIdent DOT UIdent ZWSP
##
## Ends in an error in state: 347.
##
## namespace_path(selected_expr) -> namespace_name . DOT namespace_path(selected_expr) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## namespace_path(selected_expr) -> namespace_name . DOT selected_expr [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## namespace_name
##
contract: Const UIdent DOT UIdent ZWSP
##
## Ends in an error in state: 666.
##
## namespace_path(qualifiable_pattern) -> namespace_name . DOT namespace_path(qualifiable_pattern) [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
## namespace_path(qualifiable_pattern) -> namespace_name . DOT qualifiable_pattern [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## namespace_name
##

Ill-formed selection in nested namespaces.
At this point, the selection operator '.' is expected.

contract: Const SHARP LBRACKET UIdent DOT ZWSP
##
## Ends in an error in state: 642.
##
## namespace_path(__anonymous_10) -> namespace_name DOT . namespace_path(__anonymous_10) [ RBRACKET COMMA ]
## namespace_path(__anonymous_10) -> namespace_name DOT . String [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed selection of a constructor in a namespace.
At this point, one of the following is expected:
  * a string denoting the constructor;
  * a namespace name.

contract: Const UIdent DOT ZWSP
##
## Ends in an error in state: 667.
##
## namespace_path(qualifiable_pattern) -> namespace_name DOT . namespace_path(qualifiable_pattern) [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
## namespace_path(qualifiable_pattern) -> namespace_name DOT . qualifiable_pattern [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed selection in a nested namespace.
At this point, one of the following is expected:
  * a namespace name;
  * an object pattern;
  * a variable.

contract: Namespace UIdent LBRACE For LPAR SEMI SEMI ZWSP
##
## Ends in an error in state: 816.
##
## range_for -> SEMI SEMI . [ RPAR PARAMS ]
## range_for -> SEMI SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI SEMI
##
contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 SEMI SEMI ZWSP
##
## Ends in an error in state: 866.
##
## range_for -> initialiser SEMI SEMI . [ RPAR PARAMS ]
## range_for -> initialiser SEMI SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI SEMI
##
contract: For LPAR SEMI Bytes SEMI ZWSP
##
## Ends in an error in state: 825.
##
## range_for -> SEMI condition SEMI . [ RPAR PARAMS ]
## range_for -> SEMI condition SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI condition SEMI
##
contract: For LPAR Ident MINUS2 SEMI Bytes SEMI ZWSP
##
## Ends in an error in state: 869.
##
## range_for -> initialiser SEMI condition SEMI . [ RPAR PARAMS ]
## range_for -> initialiser SEMI condition SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI condition SEMI
##

Ill-formed for-loop.
At this point, one of the following is expected:
  * an afterthought, e.g. incrementing a variable;
  * a closing parenthesis ')' otherwise.

contract: Namespace UIdent LBRACE For LPAR Let ZWSP
##
## Ends in an error in state: 827.
##
## range_of -> Let . WILD Of expr [ RPAR PARAMS ]
## range_of -> Let . Ident Of expr [ RPAR PARAMS ]
## range_of -> Let . EIdent Of expr [ RPAR PARAMS ]
## value_decl -> Let . bindings [ SEMI ]
##
## The known suffix of the stack is as follows:
## Let
##
contract: Namespace UIdent LBRACE For LPAR Const ZWSP
##
## Ends in an error in state: 837.
##
## range_of -> Const . WILD Of expr [ RPAR PARAMS ]
## range_of -> Const . Ident Of expr [ RPAR PARAMS ]
## range_of -> Const . EIdent Of expr [ RPAR PARAMS ]
## value_decl -> Const . bindings [ SEMI ]
##
## The known suffix of the stack is as follows:
## Const
##

Ill-formed for-loop.
At this point, a pattern is expected, e.g. a variable.

contract: Namespace UIdent LBRACE For LPAR Let Ident ZWSP
##
## Ends in an error in state: 831.
##
## pattern -> Ident . [ EQ COLON ]
## range_of -> Let Ident . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let Ident
##
contract: Namespace UIdent LBRACE For LPAR Const Ident ZWSP
##
## Ends in an error in state: 841.
##
## pattern -> Ident . [ EQ COLON ]
## range_of -> Const Ident . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const Ident
##
contract: For LPAR Let EIdent ZWSP
##
## Ends in an error in state: 834.
##
## pattern -> EIdent . [ EQ COLON ]
## range_of -> Let EIdent . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let EIdent
##
contract: For LPAR Const EIdent ZWSP
##
## Ends in an error in state: 844.
##
## pattern -> EIdent . [ EQ COLON ]
## range_of -> Const EIdent . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const EIdent
##

Ill-formed for-loop.
At this point, one of the following is expected:
  * the keyword 'of' if defining a for-of loop;
  * the assignment operator '=' to define the initialiser;
  * a colon ':' followed by the type of the initialiser.

contract: Namespace UIdent LBRACE For LPAR Let Ident Of ZWSP
##
## Ends in an error in state: 832.
##
## range_of -> Let Ident Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let Ident Of
##
contract: For LPAR Let EIdent Of ZWSP
##
## Ends in an error in state: 835.
##
## range_of -> Let EIdent Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let EIdent Of
##
contract: For LPAR Let WILD Of ZWSP
##
## Ends in an error in state: 829.
##
## range_of -> Let WILD Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let WILD Of
##
contract: Namespace UIdent LBRACE For LPAR Const Ident Of ZWSP
##
## Ends in an error in state: 842.
##
## range_of -> Const Ident Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const Ident Of
##
contract: For LPAR Const EIdent Of ZWSP
##
## Ends in an error in state: 845.
##
## range_of -> Const EIdent Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const EIdent Of
##
contract: For LPAR Const WILD Of ZWSP
##
## Ends in an error in state: 839.
##
## range_of -> Const WILD Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const WILD Of
##

Ill-formed for-loop.
At this point, the range is expected as an expression.

contract: Namespace UIdent LBRACE For LPAR SEMI SEMI PARAMS ZWSP
##
## Ends in an error in state: 858.
##
## par(range_for) -> LPAR range_for PARAMS . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR range_for PARAMS
##

Ill-formed for-loop.
At this point, a closing parenthesis ')' is expected.

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 BIT_AND
##
## Ends in an error in state: 864.
##
## range_for -> initialiser . SEMI SEMI [ RPAR PARAMS ]
## range_for -> initialiser . SEMI SEMI afterthought [ RPAR PARAMS ]
## range_for -> initialiser . SEMI condition SEMI [ RPAR PARAMS ]
## range_for -> initialiser . SEMI condition SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser
##

Ill-formed for-loop.
At this point, a semicolon ';' is expected.

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 SEMI ZWSP
##
## Ends in an error in state: 865.
##
## range_for -> initialiser SEMI . SEMI [ RPAR PARAMS ]
## range_for -> initialiser SEMI . SEMI afterthought [ RPAR PARAMS ]
## range_for -> initialiser SEMI . condition SEMI [ RPAR PARAMS ]
## range_for -> initialiser SEMI . condition SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI
##

Ill-formed for-loop.
At this point, one of the following is expected:
  * a semicolon ';',
  * the invariant as a boolean expression.

contract: Const ZWSP
##
## Ends in an error in state: 965.
##
## value_decl -> Const . bindings [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Const
##

Ill-formed value declaration.
At this point, a pattern is expected, e.g. a variable.

contract: Namespace UIdent LBRACE For ZWSP
##
## Ends in an error in state: 1062.
##
## empty_for_stmt -> For . par(range_for) [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(catenable_stmt) -> For . par(range_of) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## full_for_stmt(catenable_stmt) -> For . par(range_for) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE EOF Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##
contract: Namespace UIdent LBRACE Return For ZWSP
##
## Ends in an error in state: 1116.
##
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## for_of_stmt(stmt_not_ending_with_expr) -> For . par(range_of) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE EOF Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## full_for_stmt(stmt_not_ending_with_expr) -> For . par(range_for) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##
contract: If LPAR Bytes RPAR For ZWSP
##
## Ends in an error in state: 813.
##
## empty_for_stmt -> For . par(range_for) [ SEMI_ELSE SEMI RBRACE Else EOF Default Case ]
## for_of_stmt(catenable_stmt) -> For . par(range_of) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## for_of_stmt(closed_non_if_stmt) -> For . par(range_of) closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## full_for_stmt(catenable_stmt) -> For . par(range_for) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## full_for_stmt(closed_non_if_stmt) -> For . par(range_for) closed_non_if_stmt [ SEMI_ELSE Else ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE EOF Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##
contract: Return If LPAR Bytes RPAR For ZWSP
##
## Ends in an error in state: 1085.
##
## empty_for_stmt -> For . par(range_for) [ SEMI_ELSE SEMI RBRACE Else EOF Default Case ]
## for_of_stmt(closed_non_if_stmt) -> For . par(range_of) closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## for_of_stmt(stmt_not_ending_with_expr) -> For . par(range_of) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## full_for_stmt(closed_non_if_stmt) -> For . par(range_for) closed_non_if_stmt [ SEMI_ELSE Else ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE EOF Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## full_for_stmt(stmt_not_ending_with_expr) -> For . par(range_for) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##
contract: Return Attr For ZWSP
##
## Ends in an error in state: 1110.
##
## empty_for_stmt -> For . par(range_for) [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## for_of_stmt(stmt_not_ending_with_expr) -> For . par(range_of) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE EOF Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## full_for_stmt(stmt_not_ending_with_expr) -> For . par(range_for) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##

Ill-formed for-loop.
At this point, an opening parenthesis '(' is expected.

contract: Namespace UIdent LBRACE Return While ZWSP
##
## Ends in an error in state: 1077.
##
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While . par(while_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## while_stmt(stmt_not_ending_with_expr) -> While . par(while_cond) stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

Ill-formed while-loop.
At this point, an opening parenthesis '(' is expected.

contract: Namespace UIdent LBRACE Return Export ZWSP
##
## Ends in an error in state: 1118.
##
## export(fun_decl) -> Export . fun_decl [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## export(import_decl) -> Export . import_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export EOF Directive Default Continue Const Case Break Attr ]
## export(interface_decl) -> Export . interface_decl [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## export(namespace_decl) -> Export . namespace_decl [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
## export(type_decl) -> Export . type_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export EOF Directive Default Continue Const Case Break Attr ]
## export(value_decl) -> Export . value_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Export
##
contract: Export ZWSP
##
## Ends in an error in state: 964.
##
## export(declaration) -> Export . declaration [ SEMI_ELSE SEMI RBRACE Else EOF Default Case ]
## export(fun_decl) -> Export . fun_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(import_decl) -> Export . import_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## export(interface_decl) -> Export . interface_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(namespace_decl) -> Export . namespace_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(type_decl) -> Export . type_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(value_decl) -> Export . value_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Export
##
contract: Return If LPAR Bytes RPAR Export ZWSP
##
## Ends in an error in state: 1087.
##
## export(declaration) -> Export . declaration [ SEMI_ELSE SEMI RBRACE Else EOF Default Case ]
## export(fun_decl) -> Export . fun_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(import_decl) -> Export . import_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## export(interface_decl) -> Export . interface_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(namespace_decl) -> Export . namespace_decl [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## export(value_decl) -> Export . value_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Export
##

Ill-formed export declaration.
At this point, a declaration is expected.

contract: Namespace UIdent LBRACE Return Attr ZWSP
##
## Ends in an error in state: 1125.
##
## right_rec_stmt(statement) -> Attr . statement [ SEMI RBRACE EOF Default Case ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## right_rec_stmt(stmt_not_ending_with_expr) -> Attr . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##
contract: Attr ZWSP
##
## Ends in an error in state: 1064.
##
## core_stmt(statement) -> Attr . statement [ SEMI RBRACE EOF Default Case ]
## right_rec_stmt(catenable_stmt) -> Attr . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##
contract: Return Attr Attr ZWSP
##
## Ends in an error in state: 1112.
##
## core_stmt(statement) -> Attr . statement [ SEMI RBRACE EOF Default Case ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## right_rec_stmt(stmt_not_ending_with_expr) -> Attr . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated statement.
At this point, one of the following is expected:
  * another decorator;
  * a statement.

contract: Namespace UIdent LBRACE Return For LPAR SEMI SEMI RPAR ZWSP
##
## Ends in an error in state: 1117.
##
## full_for_stmt(statement) -> For par(range_for) . statement [ SEMI RBRACE EOF Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For par(range_for) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## full_for_stmt(stmt_not_ending_with_expr) -> For par(range_for) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_for)
##

Ill-formed for-loop.
At this point, the body is expected as a statement.

contract: Namespace UIdent LBRACE Return BIT_AND
##
## Ends in an error in state: 1197.
##
## braces(statements) -> LBRACE statements . RBRACE [ XOR While When WILD Verbatim VBAR UIdent Type True TIMES Switch String SLASH SHARP SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS2 PLUS PARAMS OR Nat Namespace NE Mutez Match MINUS2 MINUS Let LT LPAR LE LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ2 EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACE statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production empty_return_stmt -> Return
## In state 1142, spurious reduction of production return_stmt -> empty_return_stmt
## In state 1066, spurious reduction of production non_if_stmt(statement) -> return_stmt
## In state 990, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1136, spurious reduction of production last_or_more(statement) -> statement
## In state 1141, spurious reduction of production statements -> last_or_more(statement)
##

Ill-formed block of statements.
At this point, if the statement is complete, one of the following is
expected:
  * a semicolon ';' followed by another statement;
  * a closing brace '}' if no more statements.

contract: Namespace UIdent Implements ZWSP
##
## Ends in an error in state: 587.
##
## interface -> Implements . nsepseq(interface_expr,COMMA) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## Implements
##

Ill-formed interface declaration.
At this point, an interface is expected.

contract: Namespace UIdent Implements UIdent ZWSP
##
## Ends in an error in state: 622.
##
## nsepseq(interface_expr,COMMA) -> interface_expr . [ LBRACE ]
## nsepseq(interface_expr,COMMA) -> interface_expr . COMMA nsepseq(interface_expr,COMMA) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## interface_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 121, spurious reduction of production namespace_selection -> namespace_name
## In state 621, spurious reduction of production interface_expr -> namespace_selection
##

Ill-formed namespace declaration.
At this point, a block of statements is expected to start with an
opening brace '{'.

interactive_expr: ZWSP
##
## Ends in an error in state: 1295.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed expression.
At this point, an expression is expected.

contract: Attr Directive ZWSP
##
## Ends in an error in state: 1150.
##
## statements -> catenable_stmt . statements [ RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## catenable_stmt
##

Ill-formed statements.
At this point, a statement is expected.

contract: Const SHARP ZWSP
##
## Ends in an error in state: 636.
##
## ctor_app_pattern -> SHARP . brackets(bracketed_ctor_app_pattern) [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
## ctor_app_pattern -> SHARP . String [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## SHARP
##

Ill-formed pattern of constructor application.
At this point, one of the following is expected:
   * a constant constructor as a string;
   * an array defining the application pattern.

contract: SHARP ZWSP
##
## Ends in an error in state: 10.
##
## ctor_app_expr -> SHARP . brackets(bracketed_ctor_app_expr) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## ctor_app_expr -> SHARP . String [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## SHARP
##

Ill-formed constructor application.
At this point, one of the following is expected:
   * a constant constructor as a string;
   * an array defining the constructor application.

contract: Const Bytes COLON Ident EQ ZWSP
##
## Ends in an error in state: 740.
##
## val_binding -> pattern binding_type EQ . expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern binding_type EQ
##

Ill-formed value declaration.
At this point, the right-hand side is expected as an expression.

interactive_expr: UIdent WILD
##
## Ends in an error in state: 388.
##
## ctor_app_expr -> ctor . ctor_app_expr_args [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## ctor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production ctor -> UIdent
##

Ill-formed constructor application.
At this point, an opening parenthesis '(' is expected.

interactive_expr: Bytes As LBRACE Attr ZWSP
##
## Ends in an error in state: 131.
##
## property_decl -> Attr . property_decl [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated property.
At this point, one of the following is expected:
  * another decorator;
  * a property declaration.

interactive_expr: Bytes As VBAR Attr ZWSP
##
## Ends in an error in state: 180.
##
## variant -> Attr . variant [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##
interactive_expr: Bytes As SHARP String VBAR ZWSP
##
## Ends in an error in state: 178.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##
interactive_expr: Bytes As VBAR SHARP String VBAR ZWSP
##
## Ends in an error in state: 270.
##
## nseq(__anonymous_3) -> VBAR . variant [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## nseq(__anonymous_3) -> VBAR . variant nseq(__anonymous_3) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a decorator for the variant;
  * a variant starting with '#'.

interactive_expr: Bytes As Attr ZWSP
##
## Ends in an error in state: 169.
##
## attr_type -> Attr . par(type_expr) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## attr_type -> Attr . no_par_type_expr [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## attr_variant -> Attr . attr_variant [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## variant -> Attr . variant [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated type or variant.
At this point, one of the following is expected:
  * another decorator;
  * a type;
  * a variant.

interactive_expr: Bytes As SHARP ZWSP
##
## Ends in an error in state: 111.
##
## variant -> SHARP . brackets(bracketed_variant) [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## variant -> SHARP . String [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## SHARP
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a constant constructor as a string;
  * an array defining the constructor and its arguments.

interactive_expr: Bytes As VBAR ZWSP
##
## Ends in an error in state: 110.
##
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type nseq(__anonymous_1(object_type,VBAR)) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## nseq(__anonymous_3) -> VBAR . variant [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## nseq(__anonymous_3) -> VBAR . variant nseq(__anonymous_3) [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed variant or union type.
At this point, one of the following is expected:
  * an object type if defining a union type;
  * a variant.

interactive_expr: Bytes As LBRACKET Ident XOR
##
## Ends in an error in state: 238.
##
## type_elements -> type_element_no_string . [ RBRACKET ]
## type_elements -> type_element_no_string . COMMA nsep_or_term(type_element,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element_no_string
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 249, spurious reduction of production type_element_no_string -> no_par_type_expr
##

Ill-formed array type.
At this point, one of the following is expected:
  * a comma ',' followed by the type of an element;
  * a closing bracket ']' if no more elements.

interactive_expr: Bytes As LBRACKET Ident COMMA ZWSP
##
## Ends in an error in state: 239.
##
## type_elements -> type_element_no_string COMMA . nsep_or_term(type_element,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element_no_string COMMA
##

Ill-formed array type.
At this point, a type for an element is expected.

interactive_expr: Bytes As LBRACKET Ident COMMA Ident XOR
##
## Ends in an error in state: 241.
##
## nsepseq(type_element,COMMA) -> type_element . [ RBRACKET ]
## nsepseq(type_element,COMMA) -> type_element . COMMA nsepseq(type_element,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element . COMMA [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element . COMMA nseq(__anonymous_0(type_element,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 240, spurious reduction of production type_element -> type_expr
##

Ill-formed array type.
At this point, one of the following is expected:
  * a comma ',' followed by a type;
  * a closing bracket ']' if no more elements.

interactive_expr: Bytes As LBRACKET Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 242.
##
## nsepseq(type_element,COMMA) -> type_element COMMA . nsepseq(type_element,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element COMMA . [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element COMMA . nseq(__anonymous_0(type_element,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element COMMA
##

Ill-formed array type.
At this point, one of the following is expected:
  * a type for an element;
  * a closing bracket ']' if no more elements.

contract: Switch LPAR Bytes WILD
##
## Ends in an error in state: 572.
##
## par(switch_subject) -> LPAR switch_subject . RPAR [ LBRACE ]
## par(switch_subject) -> LPAR switch_subject . PARAMS RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR switch_subject
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 576, spurious reduction of production switch_subject -> expr
##

Ill-formed switch.
At this point, if the expression is complete, a closing parenthesis
')' is expected.

contract: If LPAR Bytes WILD
##
## Ends in an error in state: 786.
##
## par(if_cond) -> LPAR if_cond . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## par(if_cond) -> LPAR if_cond . PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR if_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 790, spurious reduction of production if_cond -> expr
##
contract: If LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 788.
##
## par(if_cond) -> LPAR if_cond PARAMS . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR if_cond PARAMS
##

Ill-formed conditional statement.
At this point, a closing parenthesis ')' is expected.

contract: If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 791.
##
## if_else_stmt(catenable_stmt) -> If par(if_cond) . closed_non_if_stmt Else catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(catenable_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(catenable_stmt) -> If par(if_cond) . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If par(if_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##
contract: If LPAR Bytes RPAR If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 795.
##
## if_else_stmt(catenable_stmt) -> If par(if_cond) . closed_non_if_stmt Else catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(catenable_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(catenable_stmt) -> If par(if_cond) . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If par(if_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##
contract: Return If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1080.
##
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If par(if_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(stmt_not_ending_with_expr) -> If par(if_cond) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##
contract: Return If LPAR Bytes RPAR If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 1084.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(stmt_ending_with_expr) -> If par(if_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_stmt(stmt_not_ending_with_expr) -> If par(if_cond) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##

Ill-formed conditional statement.
At this point, a statement for a true condition is expected.

contract: If LPAR Bytes RPAR While ZWSP
##
## Ends in an error in state: 792.
##
## while_stmt(catenable_stmt) -> While . par(while_cond) catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## while_stmt(closed_non_if_stmt) -> While . par(while_cond) closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE EOF Default Case ]
## while_stmt(stmt_ending_with_expr) -> While . par(while_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

Ill-formed while-loop.
At this point, the invariant is expected between parentheses.

contract: For LPAR SEMI SEMI Bytes WILD
##
## Ends in an error in state: 820.
##
## nsepseq(after(expr),COMMA) -> after(expr) . [ RPAR PARAMS ]
## nsepseq(after(expr),COMMA) -> after(expr) . COMMA nsepseq(after(expr),COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## after(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 818, spurious reduction of production after(expr) -> expr
##

Ill-formed for-loop.
At this point, one of the following is expected:
  * a comma ',' followed by another afterthought expression;
  * a closing parenthesis ')' otherwise.

contract: For LPAR SEMI SEMI Bytes COMMA ZWSP
##
## Ends in an error in state: 821.
##
## nsepseq(after(expr),COMMA) -> after(expr) COMMA . nsepseq(after(expr),COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## after(expr) COMMA
##

Ill-formed for-loop.
At this point, an expression is expected.

contract: For LPAR SEMI Bytes WILD
##
## Ends in an error in state: 824.
##
## range_for -> SEMI condition . SEMI [ RPAR PARAMS ]
## range_for -> SEMI condition . SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI condition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 823, spurious reduction of production condition -> expr
##

Ill-formed for-loop.
At this point, a semicolon ';' is expected.

contract: For LPAR Const Ident Of Bytes PARAMS ZWSP
##
## Ends in an error in state: 854.
##
## par(range_of) -> LPAR range_of PARAMS . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR range_of PARAMS
##

Ill-formed for-loop.
At this point, a closing parenthesis ')' is expected.

contract: For LPAR Ident MINUS2 SEMI Bytes WILD
##
## Ends in an error in state: 868.
##
## range_for -> initialiser SEMI condition . SEMI [ RPAR PARAMS ]
## range_for -> initialiser SEMI condition . SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI condition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 823, spurious reduction of production condition -> expr
##

Ill-formed for-loop.
At this point, a semicolon ';' is expected.

interactive_expr: Bytes QMARK ZWSP
##
## Ends in an error in state: 472.
##
## ternary_expr(disj_expr_level,expr) -> disj_expr_level QMARK . expr COLON expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level QMARK
##
contract: Bytes QMARK ZWSP
##
## Ends in an error in state: 879.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . typed_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK
##

Ill-formed ternary conditional.
At this point, the expression for a true condition is expected.

contract: For LPAR Const Ident Of Bytes WILD
##
## Ends in an error in state: 852.
##
## par(range_of) -> LPAR range_of . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## par(range_of) -> LPAR range_of . PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR range_of
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 843, spurious reduction of production range_of -> Const Ident Of expr
##

Ill-formed for-loop.
At this point, if the range expression is complete, a closing
parenthesis ')' is expected.

contract: Bytes QMARK Bytes QMARK Ident MINUS2 COLON Ident MINUS2 BIT_AND
##
## Ends in an error in state: 891.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK ternary_expr(core_expr,pre_expr_stmt)
##
contract: Bytes QMARK Ident PLUS2 ZWSP
##
## Ends in an error in state: 921.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK incr_expr
##
contract: Bytes QMARK Ident MINUS2 ZWSP
##
## Ends in an error in state: 931.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK decr_expr
##
contract: Bytes QMARK Ident BIT_AND_EQ Bytes WILD
##
## Ends in an error in state: 941.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK assign_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 546, spurious reduction of production bin_op(var_path,BIT_AND_EQ,expr) -> var_path BIT_AND_EQ expr
## In state 489, spurious reduction of production assign_expr -> bin_op(var_path,BIT_AND_EQ,expr)
##
interactive_expr: Bytes QMARK Bytes WILD
##
## Ends in an error in state: 473.
##
## ternary_expr(disj_expr_level,expr) -> disj_expr_level QMARK expr . COLON expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level QMARK expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##
contract: Bytes QMARK Bytes As Ident XOR
##
## Ends in an error in state: 880.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK typed_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 498, spurious reduction of production typed_expr -> app_expr_level As type_expr
##

Ill-formed ternary conditional expression.
At this point, if the expression for the true condition is complete, a
colon ':' is expected, followed by an expresion for the false
condition.

contract: Bytes QMARK Bytes QMARK Ident MINUS2 COLON Ident MINUS2 COLON ZWSP
##
## Ends in an error in state: 892.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON
##
contract: Bytes QMARK LPAR Bytes RPAR COLON ZWSP
##
## Ends in an error in state: 902.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK par(expr) COLON
##
contract: Bytes QMARK Match LPAR Bytes RPAR LBRACE Default COLON Bytes RBRACE COLON ZWSP
##
## Ends in an error in state: 912.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK match_expr COLON
##
contract: Bytes QMARK Ident PLUS2 COLON ZWSP
##
## Ends in an error in state: 922.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK incr_expr COLON
##
contract: Bytes QMARK Ident MINUS2 COLON ZWSP
##
## Ends in an error in state: 932.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK decr_expr COLON
##
contract: Bytes QMARK Ident BIT_AND_EQ Bytes COLON ZWSP
##
## Ends in an error in state: 942.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK assign_expr COLON
##
contract: Bytes QMARK Bytes LPAR RPAR COLON ZWSP
##
## Ends in an error in state: 952.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK app_expr COLON
##
interactive_expr: Bytes QMARK Bytes COLON ZWSP
##
## Ends in an error in state: 474.
##
## ternary_expr(disj_expr_level,expr) -> disj_expr_level QMARK expr COLON . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level QMARK expr COLON
##
contract: Bytes QMARK Bytes As Ident COLON ZWSP
##
## Ends in an error in state: 881.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . typed_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK typed_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK typed_expr COLON
##

Ill-formed ternary conditional.
At this point, the expression for a false condition is expected.

contract: If LPAR Bytes RPAR For LPAR Const Ident Of Bytes RPAR ZWSP
##
## Ends in an error in state: 963.
##
## for_of_stmt(catenable_stmt) -> For par(range_of) . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## for_of_stmt(closed_non_if_stmt) -> For par(range_of) . closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(statement) -> For par(range_of) . statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For par(range_of) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##
contract: For LPAR Const Ident Of Bytes RPAR ZWSP
##
## Ends in an error in state: 1063.
##
## for_of_stmt(catenable_stmt) -> For par(range_of) . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## for_of_stmt(statement) -> For par(range_of) . statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For par(range_of) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##
contract: Return If LPAR Bytes RPAR For LPAR Const Ident Of Bytes RPAR ZWSP
##
## Ends in an error in state: 1086.
##
## for_of_stmt(closed_non_if_stmt) -> For par(range_of) . closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(statement) -> For par(range_of) . statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For par(range_of) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## for_of_stmt(stmt_not_ending_with_expr) -> For par(range_of) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##
contract: Return For LPAR Const Ident Of Bytes RPAR ZWSP
##
## Ends in an error in state: 1111.
##
## for_of_stmt(statement) -> For par(range_of) . statement [ SEMI RBRACE EOF Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For par(range_of) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## for_of_stmt(stmt_not_ending_with_expr) -> For par(range_of) . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##

Ill-formed for-loop.
At this point, the body is expected as a statement.

contract: If LPAR Bytes RPAR Attr ZWSP
##
## Ends in an error in state: 976.
##
## core_stmt(closed_non_if_stmt) -> Attr . closed_non_if_stmt [ SEMI_ELSE Else ]
## core_stmt(statement) -> Attr . statement [ SEMI RBRACE EOF Default Case ]
## right_rec_stmt(catenable_stmt) -> Attr . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##
contract: Return If LPAR Bytes RPAR Attr ZWSP
##
## Ends in an error in state: 1088.
##
## core_stmt(closed_non_if_stmt) -> Attr . closed_non_if_stmt [ SEMI_ELSE Else ]
## core_stmt(statement) -> Attr . statement [ SEMI RBRACE EOF Default Case ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## right_rec_stmt(stmt_not_ending_with_expr) -> Attr . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed decorated statement.
At this point, one of the following is expected:
  * another decorator;
  * a statement.

contract: If LPAR Bytes RPAR If LPAR Bytes RPAR Break SEMI_ELSE ZWSP
##
## Ends in an error in state: 1045.
##
## if_else_stmt(catenable_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##
contract: If LPAR Bytes RPAR If LPAR Bytes RPAR Break Else ZWSP
##
## Ends in an error in state: 1050.
##
## if_else_stmt(catenable_stmt) -> If par(if_cond) closed_non_if_stmt Else . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt Else . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##
contract: If LPAR Bytes RPAR Break SEMI_ELSE ZWSP
##
## Ends in an error in state: 1061.
##
## if_else_stmt(catenable_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##
contract: If LPAR Bytes RPAR Break Else ZWSP
##
## Ends in an error in state: 1075.
##
## if_else_stmt(catenable_stmt) -> If par(if_cond) closed_non_if_stmt Else . catenable_stmt [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##
contract: Return If LPAR Bytes RPAR If LPAR Bytes RPAR Return SEMI_ELSE ZWSP
##
## Ends in an error in state: 1103.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##
contract: Return If LPAR Bytes RPAR If LPAR Bytes RPAR Return Else ZWSP
##
## Ends in an error in state: 1105.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt Else . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##
contract: Return If LPAR Bytes RPAR Return SEMI_ELSE ZWSP
##
## Ends in an error in state: 1109.
##
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##
contract: Return If LPAR Bytes RPAR Return Else ZWSP
##
## Ends in an error in state: 1115.
##
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Directive Continue Const Break Attr ]
## if_else_stmt(stmt_not_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_not_ending_with_expr [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##

Ill-formed conditional statement.
At this point, a statement for a false condition is expected.

contract: Switch LPAR Bytes RPAR LBRACE Case ZWSP
##
## Ends in an error in state: 1180.
##
## switch_case -> Case . case_expr COLON [ RBRACE Default Case ]
## switch_case -> Case . case_expr COLON statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case
##

Ill-formed switch.
At this point, a case expression is expected.

contract: Switch LPAR Bytes RPAR LBRACE Case Bytes COLON ZWSP
##
## Ends in an error in state: 1186.
##
## switch_case -> Case case_expr COLON . [ RBRACE Default Case ]
## switch_case -> Case case_expr COLON . statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case case_expr COLON
##

Ill-formed switch.
At this point, one of the following is expected:
  * the keyword 'case' to start a new case;
  * the keyword 'default' to start the default case;
  * a statement for the current case;
  * a closing brace '}' if the case is empty.

contract: Switch LPAR Bytes RPAR LBRACE Case Bytes COLON Return BIT_AND
##
## Ends in an error in state: 1190.
##
## nseq(switch_case) -> switch_case . [ RBRACE Default ]
## nseq(switch_case) -> switch_case . nseq(switch_case) [ RBRACE Default ]
##
## The known suffix of the stack is as follows:
## switch_case
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production empty_return_stmt -> Return
## In state 1142, spurious reduction of production return_stmt -> empty_return_stmt
## In state 1066, spurious reduction of production non_if_stmt(statement) -> return_stmt
## In state 990, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1136, spurious reduction of production last_or_more(statement) -> statement
## In state 1141, spurious reduction of production statements -> last_or_more(statement)
## In state 1187, spurious reduction of production switch_case -> Case case_expr COLON statements
##
contract: Switch LPAR Bytes RPAR LBRACE Default COLON Return BIT_AND
##
## Ends in an error in state: 1194.
##
## braces(cases) -> LBRACE cases . RBRACE [ While WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF EIdent Do Directive Default ContractOf Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE cases
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 581, spurious reduction of production empty_return_stmt -> Return
## In state 1142, spurious reduction of production return_stmt -> empty_return_stmt
## In state 1066, spurious reduction of production non_if_stmt(statement) -> return_stmt
## In state 990, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1136, spurious reduction of production last_or_more(statement) -> statement
## In state 1141, spurious reduction of production statements -> last_or_more(statement)
## In state 1179, spurious reduction of production switch_default -> Default COLON statements
## In state 1189, spurious reduction of production cases -> switch_default
##

Ill-formed switch.
At this point, one of the following is expected:
  * the keyword 'case' to start a new case;
  * the keyword 'default' to start the default case;
  * a closing brace '}' if no more cases.

interactive_expr: LBRACE ELLIPSIS Bytes WILD
##
## Ends in an error in state: 1206.
##
## update_expr -> ELLIPSIS expr . property_sep updates [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##

Ill-formed object update.
At this point, if the object to update is complete, a property
separator (';' or ',') is expected.

interactive_expr: LBRACE Ident COLON Bytes WILD
##
## Ends in an error in state: 1215.
##
## nsepseq(property(expr),property_sep) -> property(expr) . [ RBRACE ]
## nsepseq(property(expr),property_sep) -> property(expr) . property_sep nsepseq(property(expr),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) . property_sep [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) . property_sep nseq(__anonymous_0(property(expr),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 1211, spurious reduction of production property(expr) -> property_id COLON expr
##

Ill-formed object.
At this point, one of the following is expected:
  * a property separator (';' or ',');
  * a closing brace '}' if no more properties.

contract: LBRACKET Bytes WILD
##
## Ends in an error in state: 1234.
##
## nsepseq(element(expr),COMMA) -> element(expr) . [ RBRACKET ]
## nsepseq(element(expr),COMMA) -> element(expr) . COMMA nsepseq(element(expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(element(expr),COMMA)) -> element(expr) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(element(expr),COMMA)) -> element(expr) . COMMA nseq(__anonymous_0(element(expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## element(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 1233, spurious reduction of production element(expr) -> expr
##

Ill-formed array.
At this point, one of the following is expected:
  * a comma ',' followed by another element;
  * a closing bracket ']' otherwise.

contract: Match LPAR Bytes RPAR LBRACE Default COLON Bytes WILD
##
## Ends in an error in state: 1261.
##
## match_default -> Default COLON expr . [ RBRACE ]
## match_default -> Default COLON expr . SEMI [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default COLON expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##

Ill-formed pattern matching.
At this point, if the default expression is complete, one of the
following is expected:
  * a closing brace '}'.
  * a semicolon ';' followed by a closing brace '}'.

contract: Match LPAR Bytes RPAR LBRACE Default COLON Bytes SEMI ZWSP
##
## Ends in an error in state: 1266.
##
## braces(match_clauses) -> LBRACE match_clauses . RBRACE [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACE match_clauses
##

Ill-formed pattern matching.
At this point, a closing brace is expected '}'.

contract: Match LPAR Bytes RPAR LBRACE When LPAR Bytes RPAR COLON Bytes SEMI ZWSP
##
## Ends in an error in state: 1268.
##
## nseq(match_clause) -> match_clause . [ RBRACE Default ]
## nseq(match_clause) -> match_clause . nseq(match_clause) [ RBRACE Default ]
##
## The known suffix of the stack is as follows:
## match_clause
##

Ill-formed pattern matching.
At this point, one of the following is expected:
  * the keyword 'when' for a normal clause;
  * the keyword 'default' for the default clause.
  * a closing brace '}' if no more clauses.

contract: LPAR Bytes WILD
##
## Ends in an error in state: 1239.
##
## par(expr) -> LPAR expr . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(expr) -> LPAR expr . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##

Ill-formed parenthesised expression.
At this point, if the expression is complete, a closing parenthesis
')' is expected.

contract: While LPAR Bytes WILD
##
## Ends in an error in state: 1286.
##
## par(while_cond) -> LPAR while_cond . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
## par(while_cond) -> LPAR while_cond . PARAMS RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR while_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 1290, spurious reduction of production while_cond -> expr
##
contract: While LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 1288.
##
## par(while_cond) -> LPAR while_cond PARAMS . RPAR [ While WILD Verbatim UIdent Type True Switch String SHARP Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export EIdent Do Directive ContractOf Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR while_cond PARAMS
##

Ill-formed while-loop.
At this point, if the condition is complete, a closing parenthesis ')'
is expected.

contract: Const Bytes EQ ZWSP
##
## Ends in an error in state: 732.
##
## val_binding -> pattern EQ . expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern EQ
##

Ill-formed value declaration.
At this point, the right-hand side is expected as an expression.

contract: SHARP LBRACKET ZWSP
##
## Ends in an error in state: 12.
##
## brackets(bracketed_ctor_app_expr) -> LBRACKET . bracketed_ctor_app_expr RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed constructor application.
At this point, one of the following is expected:
  * a string denoting the constructor;
  * a namespace where to select the constructor.

contract: SHARP LBRACKET UIdent ZWSP
##
## Ends in an error in state: 16.
##
## namespace_path(__anonymous_7) -> namespace_name . DOT namespace_path(__anonymous_7) [ RBRACKET COMMA ]
## namespace_path(__anonymous_7) -> namespace_name . DOT String [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## namespace_name
##
contract: Const SHARP LBRACKET UIdent ZWSP
##
## Ends in an error in state: 641.
##
## namespace_path(__anonymous_10) -> namespace_name . DOT namespace_path(__anonymous_10) [ RBRACKET COMMA ]
## namespace_path(__anonymous_10) -> namespace_name . DOT String [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## namespace_name
##

Ill-formed constructor application.
At this point, the selection operator '.' is expected.

contract: SHARP LBRACKET UIdent DOT ZWSP
##
## Ends in an error in state: 17.
##
## namespace_path(__anonymous_7) -> namespace_name DOT . namespace_path(__anonymous_7) [ RBRACKET COMMA ]
## namespace_path(__anonymous_7) -> namespace_name DOT . String [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed selection of a constructor.
At this point, one of the following is expected:
  * a string denoting the selected constructor;
  * a namespace name.

contract: SHARP LBRACKET String ZWSP
##
## Ends in an error in state: 20.
##
## bracketed_ctor_app_expr -> ctor_expr . option(ctor_arguments(expr)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_expr
##

Ill-formed constructor application.
At this point, one of the following is expected:
  * a comma ',' followed by an argument;
  * a closing bracket ']' if none.

contract: SHARP LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 21.
##
## ctor_arguments(expr) -> COMMA . sep_or_term(ctor_arg(expr),COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## COMMA
##

Ill-formed constructor application.
At this point, one of the following is expected:
  * an argument;
  * a closing bracket ']' if none.

contract: Const SHARP LBRACKET ZWSP
##
## Ends in an error in state: 638.
##
## brackets(bracketed_ctor_app_pattern) -> LBRACKET . bracketed_ctor_app_pattern RBRACKET [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed pattern of constructor application.
At this point, one of the following is expected:
  * a string denoting the constructor;
  * a namespace where to select the constructor.

contract: Const SHARP LBRACKET String ZWSP
##
## Ends in an error in state: 645.
##
## bracketed_ctor_app_pattern -> ctor_pattern . option(ctor_arguments(pattern)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_pattern
##

Ill-formed constructor application.
At this point, one of the following is expected:
  * a comma ',' followed by a pattern for the argument;
  * a closing bracket ']'.

contract: Const SHARP LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 646.
##
## ctor_arguments(pattern) -> COMMA . sep_or_term(ctor_arg(pattern),COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## COMMA
##

Ill-formed constructor application.
At this point, one of the following is expected:
  * a pattern for an argument;
  * a closing bracket ']' if none.

contract: Const SHARP LBRACKET String COMMA Bytes ZWSP
##
## Ends in an error in state: 720.
##
## nsepseq(ctor_arg(pattern),COMMA) -> ctor_arg(pattern) . [ RBRACKET ]
## nsepseq(ctor_arg(pattern),COMMA) -> ctor_arg(pattern) . COMMA nsepseq(ctor_arg(pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(pattern),COMMA)) -> ctor_arg(pattern) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(pattern),COMMA)) -> ctor_arg(pattern) . COMMA nseq(__anonymous_0(ctor_arg(pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_arg(pattern)
##

Ill-formed pattern of constructor application.
At this point, one of the following is expected:
  * a comma ',' followed by a pattern for an argument;
  * a closing bracket ']' otherwise.

contract: Const SHARP LBRACKET String COMMA Bytes COMMA ZWSP
##
## Ends in an error in state: 721.
##
## nsepseq(ctor_arg(pattern),COMMA) -> ctor_arg(pattern) COMMA . nsepseq(ctor_arg(pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(pattern),COMMA)) -> ctor_arg(pattern) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(pattern),COMMA)) -> ctor_arg(pattern) COMMA . nseq(__anonymous_0(ctor_arg(pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_arg(pattern) COMMA
##

Ill-formed pattern of constructor application.
At this point, one of the following is expected:
  * a pattern for an argument;
  * a closing bracket ']' otherwise.

interactive_expr: Bytes As SHARP LBRACKET ZWSP
##
## Ends in an error in state: 113.
##
## brackets(bracketed_variant) -> LBRACKET . bracketed_variant RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed variant type.
At this point, a string denoting the constructor is expected.

interactive_expr: Bytes As SHARP LBRACKET String ZWSP
##
## Ends in an error in state: 114.
##
## bracketed_variant -> String . option(ctor_arguments(type_expr)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## String
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a comma ',' is expected, followed by the type of the first
    argument;
  * a closing bracket ']' if the constructor is constant.

interactive_expr: Bytes As SHARP LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 115.
##
## ctor_arguments(type_expr) -> COMMA . sep_or_term(ctor_arg(type_expr),COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## COMMA
##
interactive_expr: Bytes As SHARP LBRACKET String COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 261.
##
## nsepseq(ctor_arg(type_expr),COMMA) -> ctor_arg(type_expr) COMMA . nsepseq(ctor_arg(type_expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(type_expr),COMMA)) -> ctor_arg(type_expr) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(type_expr),COMMA)) -> ctor_arg(type_expr) COMMA . nseq(__anonymous_0(ctor_arg(type_expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_arg(type_expr) COMMA
##

Ill-formed variant type.
At this point, one of the following is expected:
  * an argument type;
  * a closing bracket ']' if the constructor is constant.

interactive_expr: Bytes As SHARP LBRACKET String COMMA Ident XOR
##
## Ends in an error in state: 260.
##
## nsepseq(ctor_arg(type_expr),COMMA) -> ctor_arg(type_expr) . [ RBRACKET ]
## nsepseq(ctor_arg(type_expr),COMMA) -> ctor_arg(type_expr) . COMMA nsepseq(ctor_arg(type_expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(type_expr),COMMA)) -> ctor_arg(type_expr) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(type_expr),COMMA)) -> ctor_arg(type_expr) . COMMA nseq(__anonymous_0(ctor_arg(type_expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_arg(type_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 255, spurious reduction of production ctor_arg(type_expr) -> type_expr
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a comma ',' followed by the type of the first argument;
  * a closing bracket ']' if the constructor is constant.

contract: Switch LPAR Bytes RPAR LBRACE Case SHARP String ZWSP
##
## Ends in an error in state: 1188.
##
## path(app_expr) -> app_expr . nseq(selection) [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## app_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1183, spurious reduction of production app_expr -> ctor_app_expr
##

Ill-formed selection in a namespace.
At this point, a namespace name is expected.

contract: SHARP LBRACKET String COMMA Bytes While
##
## Ends in an error in state: 1277.
##
## nsepseq(ctor_arg(expr),COMMA) -> ctor_arg(expr) . [ RBRACKET ]
## nsepseq(ctor_arg(expr),COMMA) -> ctor_arg(expr) . COMMA nsepseq(ctor_arg(expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(expr),COMMA)) -> ctor_arg(expr) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(expr),COMMA)) -> ctor_arg(expr) . COMMA nseq(__anonymous_0(ctor_arg(expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_arg(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
## In state 1276, spurious reduction of production ctor_arg(expr) -> expr
##
contract: SHARP LBRACKET String COMMA Bytes COMMA ZWSP
##
## Ends in an error in state: 1278.
##
## nsepseq(ctor_arg(expr),COMMA) -> ctor_arg(expr) COMMA . nsepseq(ctor_arg(expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(expr),COMMA)) -> ctor_arg(expr) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(ctor_arg(expr),COMMA)) -> ctor_arg(expr) COMMA . nseq(__anonymous_0(ctor_arg(expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_arg(expr) COMMA
##

Ill-formed constructor application.
At this point, if the argument is complete, one of the following is
expected:
  * a comma ',' followed by another argument;
  * a closing bracket ']' otherwise.

contract: Const UIdent LPAR ZWSP
##
## Ends in an error in state: 678.
##
## par(ioption(nsepseq(pattern,COMMA))) -> LPAR . RPAR [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
## par(ioption(nsepseq(pattern,COMMA))) -> LPAR . nsepseq(pattern,COMMA) RPAR [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
## par(ioption(nsepseq(pattern,COMMA))) -> LPAR . PARAMS RPAR [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
## par(ioption(nsepseq(pattern,COMMA))) -> LPAR . nsepseq(pattern,COMMA) PARAMS RPAR [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed pattern of constructor application.
At this point, one of the following is expected:
  * a pattern matching an argument;
  * a closing parenthesis ')' if the constructor is constant.

contract: Const UIdent LPAR Bytes ZWSP
##
## Ends in an error in state: 682.
##
## nsepseq(pattern,COMMA) -> pattern . [ RPAR PARAMS ]
## nsepseq(pattern,COMMA) -> pattern . COMMA nsepseq(pattern,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## pattern
##

Ill-formed pattern of constructor application.
At this point, one of the following is expected:
  * a comma ',' followed by a pattern matching an argument;
  * a closing parenthesis ')' if the constructor is constant.

contract: Const UIdent LPAR Bytes COMMA ZWSP
##
## Ends in an error in state: 683.
##
## nsepseq(pattern,COMMA) -> pattern COMMA . nsepseq(pattern,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Ill-formed pattern of constructor application.
At this point, a pattern matching an argument is expected.

contract: Const UIdent LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 689.
##
## par(ioption(nsepseq(pattern,COMMA))) -> LPAR nsepseq(pattern,COMMA) PARAMS . RPAR [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(pattern,COMMA) PARAMS
##
contract: Const UIdent LPAR PARAMS ZWSP
##
## Ends in an error in state: 680.
##
## par(ioption(nsepseq(pattern,COMMA))) -> LPAR PARAMS . RPAR [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR PARAMS
##

Ill-formed pattern of constructor application.
At this point, a closing parenthesis ')' is expected.

interactive_expr: Bytes As LBRACKET ZWSP
##
## Ends in an error in state: 126.
##
## brackets(legacy_variant) -> LBRACKET . String COMMA legacy_ctor_params RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## brackets(legacy_variant) -> LBRACKET . String RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## brackets(type_elements) -> LBRACKET . type_elements RBRACKET [ While When WILD Verbatim UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed variant type or array type.
At this point, one of the following is expected:
  * a string denoting a constructor;
  * a type denoting an element of an array type.

interactive_expr: Bytes As LBRACKET String ZWSP
##
## Ends in an error in state: 127.
##
## brackets(legacy_variant) -> LBRACKET String . COMMA legacy_ctor_params RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## brackets(legacy_variant) -> LBRACKET String . RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET String
##
interactive_expr: Bytes As LBRACKET String COMMA Ident XOR
##
## Ends in an error in state: 232.
##
## nsepseq(legacy_ctor_param,COMMA) -> legacy_ctor_param . [ RBRACKET ]
## nsepseq(legacy_ctor_param,COMMA) -> legacy_ctor_param . COMMA nsepseq(legacy_ctor_param,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## legacy_ctor_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 145, spurious reduction of production type_name -> Ident
## In state 172, spurious reduction of production no_par_type_expr -> type_name
## In state 204, spurious reduction of production core_type -> no_par_type_expr
## In state 214, spurious reduction of production type_expr -> core_type
## In state 228, spurious reduction of production legacy_ctor_param -> type_expr
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a comma ',' followed by an argument type;
  * a closing bracket ']' if the constructor is constant.

interactive_expr: Bytes As LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 129.
##
## brackets(legacy_variant) -> LBRACKET String COMMA . legacy_ctor_params RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET String COMMA
##
interactive_expr: Bytes As LBRACKET String COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 233.
##
## nsepseq(legacy_ctor_param,COMMA) -> legacy_ctor_param COMMA . nsepseq(legacy_ctor_param,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## legacy_ctor_param COMMA
##

Ill-formed variant type.
At this point, the type for an argument is expected.

interactive_expr: Bytes As VBAR LBRACKET ZWSP
##
## Ends in an error in state: 179.
##
## brackets(legacy_variant) -> LBRACKET . String COMMA legacy_ctor_params RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
## brackets(legacy_variant) -> LBRACKET . String RBRACKET [ While When WILD Verbatim VBAR UIdent Type True Switch String SHARP SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident GT Function For False Export Else EQ EOF EIdent Do Directive Default ContractOf Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed variant type.
At this point, a string denoting a constructor is expected.

contract: UIdent LPAR ZWSP
##
## Ends in an error in state: 389.
##
## par(ioption(nsepseq(expr,COMMA))) -> LPAR . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(expr,COMMA))) -> LPAR . nsepseq(expr,COMMA) RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(expr,COMMA))) -> LPAR . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(expr,COMMA))) -> LPAR . nsepseq(expr,COMMA) PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed constructor application.
At this point, one of the following is expected:
  * an argument;
  * a closing parenthesis ')' otherwise.

contract: UIdent LPAR PARAMS ZWSP
##
## Ends in an error in state: 391.
##
## par(ioption(nsepseq(expr,COMMA))) -> LPAR PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR PARAMS
##
contract: UIdent LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 398.
##
## par(ioption(nsepseq(expr,COMMA))) -> LPAR nsepseq(expr,COMMA) PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACKET LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(expr,COMMA) PARAMS
##

Ill-formed constructor application.
At this point, a closing parenthesis ')' is expected.

contract: UIdent LPAR Bytes While
##
## Ends in an error in state: 404.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR PARAMS ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 410, spurious reduction of production app_expr_level -> core_expr
## In state 496, spurious reduction of production unary_expr_level -> app_expr_level
## In state 366, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 380, spurious reduction of production add_expr_level -> mult_expr_level
## In state 459, spurious reduction of production eq_expr_level -> add_expr_level
## In state 407, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 414, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 467, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 476, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 408, spurious reduction of production non_object_expr -> disj_expr_level
## In state 400, spurious reduction of production no_attr_expr -> non_object_expr
## In state 401, spurious reduction of production expr -> no_attr_expr
##

Ill-formed constructor application.
At this point, if the argument is complete, one of the following is
expected:
  * a comma ',' followed by another argument;
  * a closing parenthesis ')' otherwise.

contract: UIdent LPAR Bytes COMMA ZWSP
##
## Ends in an error in state: 405.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed constructor application.
At this point, an argument is expected.

contract: Do ZWSP
##
## Ends in an error in state: 313.
##
## do_expr -> Do . braces(statements) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## Do
##

Ill-formed do-expression.
At this point, a block of statements is expected to start with an
opening brace '{'.

contract: For LPAR Let WILD ZWSP
##
## Ends in an error in state: 828.
##
## pattern -> WILD . [ EQ COLON ]
## range_of -> Let WILD . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let WILD
##
contract: For LPAR Const WILD ZWSP
##
## Ends in an error in state: 838.
##
## pattern -> WILD . [ EQ COLON ]
## range_of -> Const WILD . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const WILD
##

Ill-formed for-loop.
At this point, the keyword 'of' is expected.

contract: Interface UIdent Extends UIdent COMMA ZWSP
##
## Ends in an error in state: 623.
##
## nsepseq(interface_expr,COMMA) -> interface_expr COMMA . nsepseq(interface_expr,COMMA) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## interface_expr COMMA
##

Ill-formed interface declaration.
At this point, an interface expression is expected.

contract: Interface UIdent Extends ZWSP
##
## Ends in an error in state: 748.
##
## extends -> Extends . nsepseq(interface_expr,COMMA) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## Extends
##

Ill-formed interface declaration.
At this point, an interface is expected.