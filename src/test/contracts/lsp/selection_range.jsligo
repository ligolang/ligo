// alias
import Test = Test.Next

// structure / contract
namespace C {
  type storage = unit
  
  // entrypoint attr
  @entry const f = (_p: unit, _s: unit): [list<operation>, unit] => [[], []]
}

// type: sum
type sum_type =
  | { kind: "SumOfInt"; value: int }
  | { kind: "SumOfString"; value: string }
  | { kind: "SumOfEnum" }

// function
const sum_test = (input: sum_type): int => {
  switch (input.kind) {
    case "SumOfInt":
      return input.value
    case "SumOfString":
      return int(String.size(input.value))
    case "SumOfEnum":
      return 0
  }
}

// type: record
type record_type = { recorda: int, recordb: unit }

// value
const record_test = { recorda: 1, recordb: [] }

// test value
const test = do {
  const orig = Test.originate(contract_of(C), [], 0tez);
  const _c = Test.to_contract(orig.taddr);
  return []
}
