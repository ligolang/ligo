const map_find_exn = (map: map<[int, int], int>, idx: [int, int]) => {
    return match(Map.find_opt(idx, map)) {
        when(None()): failwith("Not_found");
        when(Some(v)): v;
    };
}

const matrixMultiply = (m1: map<[int, int], int>, 
                        m1r: int, 
                        m1c: int, 
                        m2: map<[int, int], int>, 
                        m2r: int, 
                        m2c: int): map<[int, int], int> => 
{
    Test.assert_with_error(m1c == m2r, 
    "Error: The number of columns in 1st matrix must be equal to number of rows in 2nd matrix");

    let m3 : map<[int, int], int> = Map.literal([]);
    for (let i = 0 ; i < m1r ; i++) {
        for (let j = 0 ; j < m2c ; j++) {
            let value = 0;
            for (let k = 0 ; k < m1c ; k++) {
                value += map_find_exn(m1, [i, k]) * map_find_exn(m2, [k, j]);
            }
            m3 = Map.add([i, j], value, m3);
        }
    };

    return m3;
}

// 3 x 1 * 1 * 3 => 3 x 3
const test_3x1_1x3 = (() => {
    let m = matrixMultiply(
        Map.literal(list([[[0, 0], 1], 
                          [[1, 0], 2], 
                          [[2, 0], 3]])), 3, 1, 
        Map.literal([[[0, 0], 4], [[0, 1], 5], [[0, 2], 6]]), 1, 3);
    Test.assert(m == Map.literal(list([
        [[0, 0], 4] , [[0, 1], 5] , [[0, 2], 6],
        [[1, 0], 8] , [[1, 1], 10], [[1, 2], 12],
        [[2, 0], 12], [[2, 1], 15], [[2, 2], 18]
    ])))
})();

// 3 x 3 * 3 x 3 => 3 x 3
const test_3x3_3x3 = (() => {
    let m = matrixMultiply(
        Map.literal(list([[[0, 0], 1], [[0, 1], 2], [[0, 2], 3], 
                          [[1, 0], 4], [[1, 1], 5], [[1, 2], 6],
                          [[2, 0], 7], [[2, 1], 8], [[2, 2], 9]])), 3, 3, 
        Map.literal(list([[[0, 0], 10], [[0, 1], 11], [[0, 2], 12],
                          [[1, 0], 13], [[1, 1], 14], [[1, 2], 15],
                          [[2, 0], 16], [[2, 1], 17], [[2, 2], 18]])), 3, 3);
    Test.assert(m == Map.literal(list([
        [[0, 0], 84] , [[0, 1], 90] , [[0, 2], 96] ,
        [[1, 0], 201], [[1, 1], 216], [[1, 2], 231],
        [[2, 0], 318], [[2, 1], 342], [[2, 2], 366]
    ])))
})();

// 1 x 3 * 3 * 1 => 1 x 1
const test_1x3_3x1 = (() => {
    let m = matrixMultiply(
        Map.literal([[[0, 0], 1], [[0, 1], 2], [[0, 2], 3]]), 1, 3, 
        Map.literal(list([[[0, 0], 4],
                          [[1, 0], 5],
                          [[2, 0], 6]])), 3, 1);
    Test.assert(m == Map.literal(list([
        [[0, 0], 32]
    ])))
})();


// I3x3 * 3 x 3 => 3 x 3
const test_I3x3_3x3 = (() => {
    let m = matrixMultiply(
        Map.literal(list([[[0, 0], 1], [[0, 1], 0], [[0, 2], 0], 
                          [[1, 0], 0], [[1, 1], 1], [[1, 2], 0],
                          [[2, 0], 0], [[2, 1], 0], [[2, 2], 1]])), 3, 3, 
        Map.literal(list([[[0, 0], 10], [[0, 1], 11], [[0, 2], 12],
                          [[1, 0], 13], [[1, 1], 14], [[1, 2], 15],
                          [[2, 0], 16], [[2, 1], 17], [[2, 2], 18]])), 3, 3);
    Test.assert(m == Map.literal(list([
        [[0, 0], 10], [[0, 1], 11], [[0, 2], 12] ,
        [[1, 0], 13], [[1, 1], 14], [[1, 2], 15],
        [[2, 0], 16], [[2, 1], 17], [[2, 2], 18]
    ])))
})();
