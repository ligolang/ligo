type storage = int;

type parameter = ["Increment", int] | ["Decrement", int] | ["Reset"];

type ret = [list<operation>, storage];

const add = (store: storage, delta: int): storage => store + delta;

const sub = (store: storage, delta: int): storage => store - delta;

namespace C {
  @entry
  const main = (action: parameter, store: storage): ret => {
    return [
      [],
      match(action) {
          when(Increment(n)): add(store, n);
          when(Decrement(n)): sub(store, n);
          when(Reset()): 0;
        }
    ]
  }
};
