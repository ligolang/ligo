/*
(*_*
  name: Hashlock Contract (JsLIGO)
  language: jsligo
  compile:
    entrypoint: main
  dryRun:
    entrypoint: main
    parameters: |
      Commit (0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce)
    storage: |
      {
        hashed: 0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce,
        unused: false,
        commits: Big_map.literal(list([
          [("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address), {date: ("2020-06-02T10:23:41Z" as timestamp), salted_hash: 0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce}]])),
      }
  deploy:
    entrypoint: main
    storage: |
      {
        hashed: 0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce,
        unused: false,
        commits: Big_map.literal(list([
          [("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address), {date: ("2020-06-02T10:23:41Z" as timestamp), salted_hash: 0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce}]])),
      }
  evaluateValue:
    entrypoint: ""
  evaluateFunction:
    entrypoint: commit
    parameters: |
      [0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce,
        {
          hashed:0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce,
          unused:false,
          commits:Big_map.literal(list([
            [("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address), {date:("2020-06-02T10:23:41Z" as timestamp), salted_hash:0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce}]]))
      }]
  generateDeployScript:
    entrypoint: main
    storage: |
      {
        hashed: 0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce,
        unused: false,
        commits: Big_map.literal(list([
          [("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address), {date: ("2020-06-02T10:23:41Z" as timestamp), salted_hash: 0x0e2ab5866b0ec701a0204881645dc50e1d60668f1433a385e999f0af1b6cd8ce}]])),
      }
*_*)
*/
type commit = {
  date:        timestamp,
  salted_hash: bytes,
};

type commit_set = big_map<address, commit>;

type storage = {
  hashed: bytes,
  unused: bool,
  commits: commit_set
};

type reveal = {
  hashable: bytes,
  message: ((_u:unit) => list<operation>)
};

type parameter =
| ["Commit", bytes]
| ["Reveal", reveal];

type return_ = [list<operation>, storage];

/* We use hash-commit so that a baker can not steal */

let commit = ([p, s] : [bytes, storage]) : return_ => {
  let commit_ : commit = {date: Tezos.get_now() + 86_400, salted_hash: p};
  let updated_map: commit_set = Big_map.update(Tezos.get_sender(), Some(commit_), s.commits);
  let s_ = {...s, commits: updated_map};
  return [[], s_];
};

let reveal = ([p, s]: [reveal, storage]) : return_ => {
  if (!s.unused) {
    failwith("This contract has already been used.");
  };

  let commit_ : commit =
    match (Big_map.find_opt(Tezos.get_sender(), s.commits), {
    Some: c => c,
    None: () =>
       (failwith("You have not made a commitment to hash against yet.") as commit)
    });
  if (Tezos.get_now() < commit_.date) {
    failwith("It has not been 24 hours since your commit yet.");
  };

  let salted : bytes =
    Crypto.sha256(
      Bytes.concat(p.hashable, Bytes.pack(Tezos.get_sender()))
    );
  if (salted != commit_.salted_hash) {
    failwith("This reveal does not match your commitment.");
  };

  if (s.hashed != Crypto.sha256(p.hashable)) {
    failwith("Your commitment did not match the storage hash.");
  };

  let s : storage = {...s, unused: false};
  return [p.message(), s];
};

let main = ([p, s]: [parameter, storage]) : return_ => {
  return match (p, {
    Commit: c => commit([c,s]),
    Reveal: r => reveal([r,s])
  });
};
