InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: <start>
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:3-10:42
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } }
        , StackItem:
          siLigoDesc: <hidden elem>
          siValue: Pair Unit 0 ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:3-10:42
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / upon function call
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:27-10:41
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / upon expression
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:31-10:40
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / upon expression
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:34-10:40
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated (42 : int)
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:34-10:40
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated (Pair 0 42 : (int * int))
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:31-10:40
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: foo
      sfLoc: test/contracts/contract-with-preprocessor.mligo@5:3-5:8
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem b of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 42
        , StackItem:
          siLigoDesc:
            elem a of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:31-10:40
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated (42 : int)
  isStackFrames:
    [ StackFrame:
      sfName: foo
      sfLoc: test/contracts/contract-with-preprocessor.mligo@5:3-5:8
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem b of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 42
        , StackItem:
          siLigoDesc:
            elem a of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:31-10:40
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated (42 : int)
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:27-10:41
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / upon expression
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:4-10:25
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated ({ } : operation list)
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:4-10:25
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of int in test/contracts/contract-with-preprocessor.mligo
          siValue: 0
        , StackItem:
          siLigoDesc:
            elem foo of (int * int) -> int in test/contracts/contract-with-preprocessor.mligo
          siValue:
            { {  };
              {  };
              UNPAIR;
              {  };
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              SWAP;
              {  };
              { {  }; { SWAP }; ADD } } ] ]
InterpretSnapshot:
  isStatus: terminated ok
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/contract-with-preprocessor.mligo@10:4-10:25
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of  in #generated
          siValue: Pair { } 42
        , StackItem:
          siLigoDesc: elem ? of  in #generated
          siValue: 0 ] ]