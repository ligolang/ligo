{
    "name": "ligo-vscode",
    "displayName": "LIGO Lang",
    "description": "LIGO VSCode extension includes syntax highlighting, debugger, and a language server for LIGO.",
    "author": "Serokell",
    "license": "MIT",
    "version": "1.6.0",
    "repository": {
        "type": "git",
        "url": "https://gitlab.com/ligolang/ligo"
    },
    "publisher": "ligolang-publish",
    "categories": [
        "Programming Languages"
    ],
    "keywords": [],
    "engines": {
        "vscode": "^1.78.0"
    },
    "activationEvents": [
        "onLanguage:mligo",
        "onLanguage:jsligo",
        "onDebugResolve:ligo"
    ],
    "icon": "logo.png",
    "main": "./client/out/extension",
    "contributes": {
        "languages": [
            {
                "id": "mligo",
                "aliases": [
                    "CameLIGO"
                ],
                "extensions": [
                    ".mligo"
                ],
                "icon": {
                    "light": "logo.png",
                    "dark": "logo.png"
                },
                "configuration": "./syntaxes/mligo.configuration.json"
            },
            {
                "id": "jsligo",
                "aliases": [
                    "JsLIGO"
                ],
                "extensions": [
                    ".jsligo"
                ],
                "icon": {
                    "light": "logo.png",
                    "dark": "logo.png"
                },
                "configuration": "./syntaxes/jsligo.configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "mligo",
                "scopeName": "source.mligo",
                "path": "./syntaxes/mligo.tmLanguage.json"
            },
            {
                "language": "jsligo",
                "scopeName": "source.jsligo",
                "path": "./syntaxes/jsligo.tmLanguage.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "LIGO LSP Configuration",
            "properties": {
                "ligoLanguageServer.maxNumberOfProblems": {
                    "scope": "resource",
                    "type": "number",
                    "default": 100,
                    "description": "Controls the maximum number of diagnostics produced by the server per file."
                },
                "ligoLanguageServer.ligoBinaryPath": {
                    "scope": "resource",
                    "type": "string",
                    "default": "ligo",
                    "description": "Path to the ligo binary, default one is extracted from $PATH variable."
                },
                "ligoLanguageServer.disabledFeatures": {
                    "scope": "resource",
                    "type": "array",
                    "default": [],
                    "markdownDescription": "Disable specific LIGO LSP features. For a list of features, see [the README.md](https://gitlab.com/ligolang/ligo/-/blob/dev/tools/vscode/README.md)."
                },
                "ligoLanguageServer.tezos_source_account": {
                    "scope": "resource",
                    "type": "string",
                    "default": "baker",
                    "description": "Account for originating contracts from. It should contain enough money for origination"
                },
                "ligoLanguageServer.loggingVerbosity": {
                    "scope": "resource",
                    "type": "string",
                    "enum": [
                        "error",
                        "warning",
                        "info",
                        "log"
                    ],
                    "default": "info",
                    "description": "The verbosity of logging. Error will show only errors, warning will show errors and warnings, and so on."
                },
                "ligoLanguageServer.maxLineWidth": {
                    "scope": "resource",
                    "type": [
                        "number",
                        "null"
                    ],
                    "default": null,
                    "markdownDescription": "Sets custom max line width for a formatted file. Default is 80. If a custom `printWidth` is set in `.ligopretty` file, this setting has no effect (see [the README.md](https://gitlab.com/ligolang/ligo/-/blob/dev/tools/vscode/README.md)). Requires LIGO 0.67.0 or newer."
                },
                "ligoLanguageServer.completionImplementation": {
                    "scope": "resource",
                    "type": "string",
                    "enum": [
                        "in-scope identifiers (can be slow)",
                        "all identifiers",
                        "only fields and keywords"
                    ],
                    "default": "in-scope identifiers (can be slow)",
                    "markdownDescription": "There are different implementations for LSP-based completion suggestions:\n- 'in-scope identifiers' is most accurate, but can be slow (leading to LSP being stuck) on big files.\n- 'all identifiers' is faster, but contains identifiers that are not in scope.\n- 'only fields and keywords' shows only keywords unless we're completing a module item or a record field."
                },
                "ligoLanguageServer.diagnosticsPullMode": {
                    "scope": "resource",
                    "type": "string",
                    "enum": [
                        "on doc update (can be slow)",
                        "on document link request",
                        "on save"
                    ],
                    "default": "on document link request",
                    "markdownDescription": "When should the language server publish diagnostics for files?\n - 'on doc update' means running checks on each keystroke which can lead to performance problems\n - 'on document link request' relies on the `textDocument/documentLink` request sent automatically by VSCode when the user stops typing\n - 'on save' checks a file and publishes diagnostics for it after the file was saved\nNote: the file is also always checked when the language server receives a request like hover/completion/etc"
                },
                "ligoLanguageServer.metadataChecksDownloading": {
                    "scope": "resource",
                    "type": "boolean",
                    "default": true,
                    "description": "Allow metadata checks to visit specified external resources (relevant for e.g. TZIP-16 metadata)."
                },
                "ligoLanguageServer.metadataChecksDownloadTimeout": {
                    "scope": "resource",
                    "type": "number",
                    "default": 10,
                    "description": "Time limit (in seconds) for metadata checks that involve downloading from external resource.\nTakes effect only when metadata checks downloading is enabled."
                },
                "ligoDebugger.maxSteps": {
                    "scope": "resource",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": 1000,
                    "minimum": 1,
                    "maximum": 18446744073709551615,
                    "description": "Maximum number of steps in contract. Leave it blank if you want an infinite amount of steps."
                }
            }
        },
        "commands": [
            {
                "command": "ligo.startServer",
                "title": "LIGO: Start LIGO LSP server",
                "description": "Starts the LIGO LSP server"
            },
            {
                "command": "ligo.stopServer",
                "title": "LIGO: Stop LIGO LSP server",
                "description": "Stops the LIGO LSP server"
            },
            {
                "command": "ligo.restartServer",
                "title": "LIGO: Restart LIGO LSP server",
                "description": "Stops then starts the LIGO LSP server"
            },
            {
                "command": "ligo.compileContract",
                "title": "LIGO: Compile the current LIGO contract",
                "description": "Compiles the current LIGO contract and prints the output to the console"
            },
            {
                "command": "ligo.compileStorage",
                "title": "LIGO: Compile the current LIGO contract's storage",
                "description": "Compiles the current LIGO contract's storage and prints the output to the console"
            },
            {
                "command": "ligo.compileExpression",
                "title": "LIGO: Compile an entrypoint in the current LIGO contract",
                "description": "Compiles an entrypoint in the current LIGO contract and prints the output to the console"
            },
            {
                "command": "ligo.dryRun",
                "title": "LIGO: Run the current LIGO contract",
                "description": "Runs the current LIGO contract with the given parameter and storage"
            },
            {
                "command": "ligo.evaluateFunction",
                "title": "LIGO: Run a function in the current LIGO contract",
                "description": "Runs a function in the current ligo contract on a given argument"
            },
            {
                "command": "ligo.evaluateValue",
                "title": "LIGO: Evaluate a LIGO definition",
                "description": "Evaluates a LIGO definition"
            },
            {
                "command": "ligo.deploy",
                "title": "Tezos: Deploy the current contract",
                "description": "Deploys the current contract on a given network"
            },
            {
                "command": "ligo.generateDeployScript",
                "title": "Tezos: Generate deploy script",
                "description": "Generates deploy script for a given contract"
            },
            {
                "command": "ligo.silentCompileContract",
                "title": "LIGO: Silently compile contract",
                "description": "Compiles the current LIGO contract without UI interactions. Additional compile flags can be provided through an array."
            },
            {
                "command": "extension.ligo-debugger.switchSteppingGranularity",
                "title": "Debug: Switch stepping granularity",
                "description": "Changes granularity used by StepIn and other buttons"
            },
            {
                "command": "extension.ligo-debugger.useLastSteppingGranularity",
                "title": "Debug: Switch to last stepping granularity",
                "description": "Changes stepping granularity to the previously selected one"
            },
            {
                "command": "extension.ligo-debugger.createLigoConfig",
                "title": "Debug: Create configuration in LIGO for the debugger",
                "description": "Creates a configuration in LIGO. You can pick a dialect of the config that you're interested in."
            }
        ],
        "keybindings": [
            {
                "command": "extension.ligo-debugger.useLastSteppingGranularity",
                "key": "ctrl+f10",
                "mac": "cmd+f10"
            }
        ],
        "breakpoints": [
            {
                "language": "mligo"
            },
            {
                "language": "jsligo"
            }
        ],
        "debuggers": [
            {
                "type": "ligo",
                "label": "LIGO Debugger",
                "languages": [
                    "mligo",
                    "jsligo"
                ],
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "parameter",
                            "storage"
                        ],
                        "properties": {
                            "configPath": {
                                "type": "string",
                                "description": "A path to a debugger configuration file written in LIGO",
                                "default": "(*@AskOnStart@*)"
                            },
                            "program": {
                                "type": "string",
                                "description": "Path to contract code",
                                "default": "(*@CurrentFile@*)"
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Whether to automatically stop after launch",
                                "default": true
                            },
                            "moduleName": {
                                "type": "string",
                                "description": "Module to compile the contract",
                                "default": "(*@AskOnStart@*)"
                            },
                            "entrypoint": {
                                "type": "string",
                                "description": "Entrypoint to call. If specified, as parameter you should enter argument of this entrypoint.",
                                "default": "(*@AskOnStart@*)"
                            },
                            "parameter": {
                                "type": "string",
                                "description": "Parameter value.",
                                "default": "(*@AskOnStart@*)"
                            },
                            "parameterLang": {
                                "type": "string",
                                "description": "Language of parameter ('LIGO' or 'Michelson')",
                                "default": "LIGO"
                            },
                            "storage": {
                                "type": "string",
                                "description": "Initial storage value.",
                                "default": "(*@AskOnStart@*)"
                            },
                            "storageLang": {
                                "type": "string",
                                "description": "Language of storage ('LIGO' or 'Michelson')",
                                "default": "LIGO"
                            },
                            "logDir": {
                                "type": "string",
                                "description": "Path to a directory where the debug adapter will create a logging file",
                                "default": "/tmp/ligo-debugger"
                            },
                            "contractEnv": {
                                "type": "object",
                                "description": "Constants that form the contract environment",
                                "properties": {
                                    "now": {
                                        "default": "2020-01-01T00:00:00Z",
                                        "description": "Value returned by `Tezos.get_now()`"
                                    },
                                    "level": {
                                        "default": 0,
                                        "description": "Value returned by `Tezos.get_level()`"
                                    },
                                    "sender": {
                                        "type": "string",
                                        "default": "tz1hTK4RYECTKcjp2dddQuRGUX5Lhse3kPNY",
                                        "description": "Value returned by `Tezos.get_sender()`"
                                    },
                                    "source": {
                                        "type": "string",
                                        "default": "tz1hTK4RYECTKcjp2dddQuRGUX5Lhse3kPNY",
                                        "description": "Value returned by `Tezos.get_source()`"
                                    },
                                    "self": {
                                        "type": "string",
                                        "default": "KT1XQcegsEtio9oGbLUHA8SKX4iZ2rpEXY9b",
                                        "description": "Value returned by `Tezos.get_self_address()`"
                                    },
                                    "amount": {
                                        "default": 0,
                                        "description": "Value returned by `Tezos.get_amount()`"
                                    },
                                    "balance": {
                                        "default": 0,
                                        "description": "Value returned by `Tezos.get_balance()`"
                                    },
                                    "chainId": {
                                        "type": "string",
                                        "default": "NetXH12Aer3be93",
                                        "description": "Value returned by `Tezos.get_chain_id()`"
                                    },
                                    "votingPowers": {
                                        "type": "object",
                                        "description": "Voting power distribution, affects `Tezos.voting_power` and `Tezos.get_total_voting_power()`",
                                        "properties": {
                                            "kind": {
                                                "enum": "simple"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "ligo",
                        "request": "launch",
                        "name": "Launch LIGO",
                        "logDir": "",
                        "moduleName": "(*@AskOnStart@*)",
                        "entrypoint": "(*@AskOnStart@*)",
                        "parameter": "(*@AskOnStart@*)",
                        "storage": "(*@AskOnStart@*)"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "LIGO: Simple",
                        "description": "Minimalistic LIGO Debugger configuration",
                        "body": {
                            "type": "ligo",
                            "request": "launch",
                            "name": "Launch ${1:LIGO contract}",
                            "moduleName": "${2|(*@AskOnStart@*)|}",
                            "entrypoint": "${3|(*@AskOnStart@*)|}",
                            "parameter": "${4|(*@AskOnStart@*)|}",
                            "storage": "${5|(*@AskOnStart@*)|}"
                        }
                    },
                    {
                        "label": "LIGO: Custom",
                        "description": "LIGO debugger configuration with all values customized",
                        "body": {
                            "type": "ligo",
                            "request": "launch",
                            "name": "Launch ${1:LIGO contract}",
                            "logDir": "",
                            "program": "${2|(*@CurrentFile@*)|}",
                            "stopOnEntry": true,
                            "entrypoint": "${3|(*@AskOnStart@*)|}",
                            "moduleName": "${4|(*@AskOnStart@*)|}",
                            "parameter": "${5|(*@AskOnStart@*)|}",
                            "parameterLang": "LIGO",
                            "storage": "${6|(*@AskOnStart@*)|}",
                            "storageLang": "LIGO",
                            "contractEnv": {
                                "now": "${7:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}Z}",
                                "level": "${8:10000}",
                                "sender": "${9:tz1hTK4RYECTKcjp2dddQuRGUX5Lhse3kPNY}",
                                "source": "${10:$8}",
                                "self": "${11:KT1XQcegsEtio9oGbLUHA8SKX4iZ2rpEXY9b}",
                                "amount": "${12:0}",
                                "balance": "${13:1000000}",
                                "chainId": "${14:NetXH12Aer3be93}",
                                "votingPowers": {
                                    "kind": "simple",
                                    "contents": {
                                        "tz1aZcxeRT4DDZZkYcU3vuBaaBRtnxyTmQRr": "100$0"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run esbuild-base -- --minify",
        "compile": "npm run esbuild-base -- --sourcemap",
        "esbuild-base": "esbuild ./client/src/extension.ts --bundle --outfile=./client/out/extension.js --external:vscode --format=cjs --platform=node",
        "watch": "tsc -b -w",
        "package": "vsce package",
        "lint": "eslint client --ext .ts",
        "build-tests": "tsc -p ./test/",
        "test": "npm run build-tests && node client/out/test/driver.js",
        "extest": "npm run build-tests && extest setup-and-run --yarn --offline --code_version 1.81.1 client/out/test/vsc-test/commands.test.js",
        "extest-deploy": "npm run build-tests && extest setup-and-run --yarn --offline --code_version 1.81.1 client/out/test/vsc-test/commands-deploy.test.js"
    },
    "dependencies": {
        "@airgap/beacon-sdk": "^3.0.0",
        "@taquito/signer": "^17.0.0",
        "@taquito/taquito": "^17.0.0",
        "@vscode/debugadapter-testsupport": "1.55.1",
        "@vscode/debugprotocol": "1.55.1",
        "axios": "^1.4.0",
        "detect-installer": "git+https://github.com/ligolang/detect-installer.git",
        "fs-extra": "^11.1.0",
        "node-fetch": "^3.2.3",
        "semver": "^7.3.5",
        "vscode-languageclient": "^8.1.0"
    },
    "devDependencies": {
        "@types/chai": "^4.3.5",
        "@types/copy-paste": "^1.1.30",
        "@types/glob": "^7.2.0",
        "@types/mocha": "^10.0.1",
        "@types/node": "^20.1.0",
        "@types/vscode": "^1.78.0",
        "@typescript-eslint/eslint-plugin": "^4.27.0",
        "@typescript-eslint/parser": "^4.27.0",
        "@vscode/debugadapter": "1.55.1",
        "@vscode/test-electron": "^2.3.0",
        "@vscode/vsce": "^2.19.0",
        "chai": "^4.3.7",
        "copy-paste": "^1.3.0",
        "esbuild": "^0.13.4",
        "eslint": "^7.28.0",
        "eslint-config-airbnb-base": "^14.2.1",
        "eslint-plugin-import": "^2.23.4",
        "glob": "^7.2.0",
        "mocha": "^10.2.0",
        "ts-command-line-args": "^2.1.0",
        "typescript": "^5.0.4",
        "vscode-extension-tester": "^5.5.3"
    }
}
