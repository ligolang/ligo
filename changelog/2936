
author: er433
description: "\\nHere is an example showing `include` in `module type`:\\n\\n```\\nmodule type FA0 = sig\\n  type t\\n  [@entry] val transfer : unit -> t -> operation list * t\\nend\\n\\nmodule type FA0EXT = sig\\n  include FA0\\n  [@entry] val transfer2 : unit -> t -> operation list * t\\nend\\n\\nmodule FA0Impl : FA0 = struct\\n  type t = unit\\n  [@entry] let transfer (_ : unit) (_ : t) : operation list * t = ([], ())\\nend\\n\\nmodule FA0EXTImpl : FA0EXT = struct\\n  include FA0Impl\\n\\n  [@entry] let transfer2 (_ : unit) (_ : t) : operation list * t = ([], ())\\nend\\n\\n```\\n\\nHere is an example showing JsLIGO's new features:\\n\\n```\\ninterface FABase {\\n  type t;\\n};\\n\\ninterface FA0 extends FABase {\\n  @entry const transfer : (_u : unit, s : t) => [list<operation>, t];\\n};\\n\\ninterface FA0Ext extends FA0 {\\n  @entry const other1 : (_u : unit, s : t) => [list<operation>, t];\\n};\\n\\ninterface FA1 extends FABase {\\n  @entry const other2 : (_u : unit, s : t) => [list<operation>, t];\\n};\\n\\nnamespace Impl implements FA0Ext, FA1 {\\n  type t = int;\\n\\n  @entry const transfer = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @entry const other1 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @entry const other2 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n};\\n\\ninterface FAAll extends FA0Ext, FA1 {\\n  @entry const other3 : (_u : unit, s : t) => [list<operation>, t];\\n  @view const v1 : (_u : unit, s : t) => t;\\n};\\n\\nnamespace ImplAll implements FAAll {\\n  type t = int;\\n\\n  @entry const transfer = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @entry const other1 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @entry const other2 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @entry const other3 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @view const v1 = (_u : unit, s : t) : t => s;\\n\\n  /* foo, other4 and v2 are not in FAAll, but still added, because filtering\\n     is not enabled */\\n  export const foo = (s : t) : t => s;\\n  @entry const other4 = (_u : unit, s : t) : [list<operation>, t] => [list([]), s];\\n  @view const v2 = (_u : unit, s : t) : t => s;\\n}\\n\\nconst test = do {\\n  let orig = Test.originate(contract_of(ImplAll), ImplAll.foo(42), 0tez);\\n  let p : parameter_of ImplAll = Other4();\\n  Test.transfer_exn(orig.addr, p, 1mutez);\\n}\\n\\n```\\n\\n"
merge_request: '2936'
title: "Interfaces and module types: implement `extends`/`include`"
type: added
            