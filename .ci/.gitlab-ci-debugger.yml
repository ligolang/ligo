## Debugger

include:
  - '/.ci/.gitlab-ci-tools-common.yml'

variables:
  LIGO_DEBUGGER_IMAGE_TAG: "ligo-debugger:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}"

.run_ligo_debugger_tests: &run_ligo_debugger_tests
  - docker build tools/debugger -t "${LIGO_DEBUGGER_IMAGE_TAG}-test"
  - docker run -v $PWD/ligo:/usr/bin/ligo -v $PWD/src/test/contracts:/contracts
      --env="LIGO_TEST_CONTRACTS_DIR=/contracts"
      --rm "${LIGO_DEBUGGER_IMAGE_TAG}-test" stack test --system-ghc --test-arguments="${LIGO_TEST_FLAGS}"
.cleanup_ligo_debugger_test: &cleanup_ligo_debugger_test
  - docker image rm --force "${LIGO_DEBUGGER_IMAGE_TAG}-test" || true

debugger-danger-instant-checks:
  stage: tools-precheck
  rules: &debugger_danger_checks
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - tools/debugger/**/*
        - danger/**/*
  needs: []
  allow_failure: true
  interruptible: true
  tags:
    - gcp-docker
  image: ruby:3.2.2
  before_script: &install_danger
    - gem install --quiet danger-gitlab
  script:
    - danger --fail-on-errors=true
        --dangerfile=./danger/instant-checks.rb
        --danger_id=instant

debugger-danger-hlint:
  stage: tools-precheck
  rules: *debugger_danger_checks
  needs: []
  interruptible: true
  tags:
    - gcp-docker
  image: ruby:3.2.2
  before_script:
    - gem install --quiet danger-gitlab
    - wget -qO- https://github.com/ndmitchell/hlint/releases/download/v3.6.1/hlint-3.6.1-x86_64-linux.tar.gz | tar xz
    - ln -sf "$PWD/hlint-3.6.1/hlint" /usr/bin/hlint
  script:
    - danger --fail-on-errors=true
        --dangerfile=./danger/hlint.rb
        --danger_id=hlint

debugger-danger-premerge-checks:
  stage: tools-check
  rules: *debugger_danger_checks
  needs: ["debugger-danger-instant-checks"]  # To get messages in MRs ordered right
  when: always
  interruptible: true
  tags:
    - docker
  image: ruby:3.2.2
  before_script: *install_danger
  script:
    - danger --fail-on-errors=true
        --dangerfile=./danger/premerge-checks.rb
        --danger_id=premerge
  allow_failure: true

debugger-build:
  stage: tools-build
  tags:
    - gcp-ubuntu
  rules: &debugger_mr_dev
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - !reference [.dev]
    - !reference [.vscode_production]
  needs: []
  script:
    - docker build tools/debugger -t "${LIGO_DEBUGGER_IMAGE_TAG}" --target debugger-build
    - LIGO_DEBUGGER_CONTAINER="$(docker create "${LIGO_DEBUGGER_IMAGE_TAG}")"
    - mkdir -p Linux/bin
    - docker cp "$LIGO_DEBUGGER_CONTAINER":/ligo-debugger/ligo-debugger Linux/bin
  after_script:
    - docker image rm --force "${LIGO_DEBUGGER_IMAGE_TAG}" || true
    - docker container rm --force "$LIGO_DEBUGGER_CONTAINER" || true
  artifacts:
    paths:
      - Linux

debugger-build-macos:
  stage: tools-build
  rules: *debugger_mr_dev
  needs: []
  tags:
    - mac
    - i7
  script:
    - mkdir -p Darwin/bin
    - OUT_DIR="$PWD/Darwin/bin"
    - cd tools/debugger/ligo-debugger
    - stack build --ghc-options '-Werror' --copy-bins --local-bin-path="$OUT_DIR"
    - ../../scripts/relink-mac-binary.sh "$OUT_DIR/ligo-debugger" ../lib
  artifacts:
    paths:
      - Darwin

debugger-test-ligo-latest:
  stage: tools-check
  tags:
    - gcp-ubuntu
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
  needs: [docker_extract, debugger-build]
  variables:
    LIGO_TEST_FLAGS: "-r"
  script: *run_ligo_debugger_tests
  after_script: *cleanup_ligo_debugger_test

debugger-test-static-debugger-binary:
  stage: tools-check
  tags:
    - gcp-ubuntu
  rules: *debugger_mr_dev
  needs: [debugger-build]
  allow_failure: true
  script:
    - (ldd Linux/bin/ligo-debugger || true) 2>&1 | grep -q "not a dynamic executable"

debugger-build-and-publish-build-base-image:
  stage: push
  tags:
    - gcp-ubuntu
  variables:
    DEBUGGER_BASE_IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}/debugger-build-base:latest"
  rules:
    - !reference [.dev]
  script:
    - docker build tools/debugger -t "$DEBUGGER_BASE_IMAGE" --target debugger-build-base
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$DEBUGGER_BASE_IMAGE"
  after_script:
    - docker image rm --force "$DEBUGGER_BASE_IMAGE" || true
