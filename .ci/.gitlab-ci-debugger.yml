## Debugger

include:
  - '/.ci/.gitlab-ci-tools-common.yml'

variables:
  LIGO_DEBUGGER_IMAGE_TAG: "ligo-debugger:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}"
# Reads ligo version from 'LIGO_VERSION_FILE' env variable,
# gets ligo binary from the corresponding release, and does
# 'git add ligo' to make binary available for flake.
.get_release_ligo_binary: &get_release_ligo_binary
  # strip all comments form the version file and grep for version
  - ligo_version="$(cat "$LIGO_VERSION_FILE" | sed '/^#/d' | grep -E '([0-9]{1,}\.)+[0-9]{1,}')"
  - ligo_link="$(curl --silent https://gitlab.com/api/v4/projects/ligolang%2Fligo/releases/"$ligo_version"/assets/links |
      jq -r '.[] | select(.name == \"Static Linux binary\") | .direct_asset_url')"
  - wget --quiet -O ligo "$ligo_link"
  - chmod +x ligo
  - ./ligo --version

# This one runs 'ligo-debugger-test' with flags in 'LIGO_TEST_FLAGS' env variable.
.run_ligo_debugger_tests: &run_ligo_debugger_tests
  - docker build tools/debugger -t "${LIGO_DEBUGGER_IMAGE_TAG}-test"
  - docker run -v $PWD/ligo:/usr/bin/ligo -v $PWD/src/test/contracts:/contracts
      --env="LIGO_TEST_CONTRACTS_DIR=/contracts"
      --rm "${LIGO_DEBUGGER_IMAGE_TAG}-test" stack test --system-ghc --test-arguments="${LIGO_TEST_ARGS}"
.cleanup_ligo_debugger_test: &cleanup_ligo_debugger_test
  - docker image rm --force "${LIGO_DEBUGGER_IMAGE_TAG}-test" || true

debugger-danger-instant-checks:
  stage: tools-precheck
  rules: &debugger_danger_checks
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - tools/debugger/**/*
        - danger/**/*
  needs: []
  allow_failure: true
  interruptible: true
  tags:
    - docker
  image: ruby:3.2.2
  before_script: &install_danger
    - gem install --quiet danger-gitlab
  script:
    - danger --fail-on-errors=true
        --dangerfile=./danger/instant-checks.rb
        --danger_id=instant

debugger-danger-hlint:
  stage: tools-precheck
  rules: *debugger_danger_checks
  needs: []
  interruptible: true
  tags:
    - docker
  image: ruby:3.2.2
  before_script:
    - gem install --quiet danger-gitlab
    - wget -qO- https://github.com/ndmitchell/hlint/releases/download/v3.6.1/hlint-3.6.1-x86_64-linux.tar.gz | tar xz
    - ln -sf "$PWD/hlint-3.6.1/hlint" /usr/bin/hlint
  script:
    - danger --fail-on-errors=true
        --dangerfile=./danger/hlint.rb
        --danger_id=hlint

debugger-danger-premerge-checks:
  stage: tools-check
  rules: *debugger_danger_checks
  needs: ["debugger-danger-instant-checks"]  # To get messages in MRs ordered right
  when: always
  interruptible: true
  tags:
    - docker
  image: ruby:3.2.2
  before_script: *install_danger
  script:
    - danger --fail-on-errors=true
        --dangerfile=./danger/premerge-checks.rb
        --danger_id=premerge
  allow_failure: true

debugger-build:
  stage: tools-build
  rules: &debugger_mr_dev
    - !reference [.debugger_mr_changes]
    - !reference [.dev]
    - !reference [.vscode_production]
  needs: []
  script:
    - docker build tools/debugger -t "${LIGO_DEBUGGER_IMAGE_TAG}" --target debugger-build
    - LIGO_DEBUGGER_CONTAINER="$(docker create "${LIGO_DEBUGGER_IMAGE_TAG}")"
    - mkdir -p Linux/bin
    - docker cp "$LIGO_DEBUGGER_CONTAINER":/ligo-debugger/ligo-debugger Linux/bin
  after_script:
    - docker image rm --force "${LIGO_DEBUGGER_IMAGE_TAG}" || true
    - docker container rm --force "$LIGO_DEBUGGER_CONTAINER" || true
  artifacts:
    paths:
      - Linux

debugger-build-macos:
  stage: tools-build
  rules: *debugger_mr_dev
  needs: []
  tags:
    - mac
    - i7
  script:
    - mkdir -p Darwin/bin
    - OUT_DIR="$PWD/Darwin/bin"
    - cd tools/debugger/ligo-debugger
    - stack build --ghc-options '-Werror' --copy-bins --local-bin-path="$OUT_DIR"
    - ../../scripts/relink-mac-binary.sh "$OUT_DIR/ligo-debugger" ../lib
  artifacts:
    paths:
      - Darwin

debugger-test-ligo-recommended:
  stage: tools-check
  rules:
    - !reference [.vscode_production]
  needs: [debugger-build]
  variables:
    LIGO_VERSION_FILE: "./tools/debugger/ligo-debugger/src/resources/versions/recommended"
    LIGO_TEST_FLAGS: "-r"
  before_script: *get_release_ligo_binary
  script: *run_ligo_debugger_tests
  after_script: *cleanup_ligo_debugger_test

debugger-test-ligo-latest:
  stage: tools-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
  needs: [docker_extract, debugger-build]
  variables:
    LIGO_TEST_FLAGS: "-r"
  script: *run_ligo_debugger_tests
  after_script: *cleanup_ligo_debugger_test

debugger-test-static-debugger-binary:
  stage: tools-check
  rules: *debugger_mr_dev
  needs: [debugger-build]
  allow_failure: true
  script:
    - (ldd Linux/bin/ligo-debugger || true) 2>&1 | grep -q "not a dynamic executable"

debugger-test-ligo-minimal-supported:
  stage: push
  rules:
    - !reference [.vscode_production]
  needs: [debugger-build]
  when: manual
  variables:
    LIGO_VERSION_FILE: "./tools/debugger/ligo-debugger/src/resources/versions/minimal-supported"
    LIGO_TEST_FLAGS: "-r -m"
  before_script: *get_release_ligo_binary
  script: *run_ligo_debugger_tests
  after_script: *cleanup_ligo_debugger_test
  allow_failure: true

debugger-build-and-publish-build-base-image:
  stage: push
  rules:
   - !reference [.dev]
  script:
    - docker build tools/debugger -t "debugger-build-base:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}" --target debugger-build
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY/$CI_REGISTRY_IMAGE/debugger-build-base:latest"
  after_script:
    - docker image rm --force debugger-build-base:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID} || true
