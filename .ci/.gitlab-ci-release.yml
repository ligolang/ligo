#######################################################################
# Process to build new release
# Triggered when a branch prefixed by release/ will be pushed
# Will update code and create a merge request targeting dev
#######################################################################

initialize-ssh:
  stage: pretooling
  only:
    # prefixed by release /^release/.*/
    - /^release/.*/
    - tags
  script:
      - chmod 766 ~/.ssh
      - eval `ssh-agent -s`
      - cat $SSH_PRIVATE_KEY_TOOLKIT  > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - ssh-keyscan gitlab.com  >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      - cp .ci/scripts/AUR/ssh_config ~/.ssh/config

initialize-git:
  stage: pretooling
  dependencies:
    - initialize-ssh
  only:
    # prefixed by release /^release/.*/
    - /^release/.*/
    - tags
  script:
      - git config --global user.name 'InfraBot'
      - git config --global user.email 'infra@marigold.dev'

trigger_new_minor_version_generation:
  stage: pretooling
  dependencies:
    - initialize-git
  script:
    - LAST_RELEASE_VERSION=$(./.ci/scripts/release_metadata/read_release_metadata.sh LAST_RELEASE_VERSION)
    - NEW_VERSION=$(./.ci/scripts/versionning/increment_minor_version.sh $LAST_RELEASE_VERSION)
    - git checkout -b release/$NEW_VERSION
    - git push -u origin release/$NEW_VERSION
  rules:
    - if: ($TRIGGER_NEW_MINOR_VERSION_GENERATION != null )
      when: always

build_release_env_vars:
  stage: pretooling
  script:
    - RELEASE_VERSION=${CI_COMMIT_BRANCH#"release/"}
    - echo "RELEASE_VERSION=${RELEASE_VERSION}" >> releaseversion.env
  artifacts:
    reports:
      dotenv: releaseversion.env
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ )
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
#######################################################################
# Following script is executed when branch is created
#######################################################################
create-tag:
  stage: release    
  script:
    - git remote rm origin && git remote add origin "git@gitlab.com:ligolang/ligo.git"
    # Don't want to tag for testing
    - echo $DRY_RUN_RELEASE
    - |
      if [[ $DRY_RUN_RELEASE == "" ]]; then
        git tag -a $RELEASE_VERSION -m "Tag version $RELEASE_VERSION"
        git push origin $RELEASE_VERSION
      fi
  needs:
    - job: initialize-ssh
    - job: initialize-git
    - job: build_release_env_vars
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/ && $TRIGGER_DOC_UPDATE == null' 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
#######################################################################
# Following script is executed when pipeline execute the release tag process
# Related to release generation
# Related to stable version
# Related to metadata update
#######################################################################
determine_new_stable_version:
  stage: pretooling
  tags:
    - docker
  before_script:
    # Have to be done here because we are using an image for this job.
    - apt-get update
    - apt-get install -y --no-install-recommends jq
  rules:
  - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.0/'
    when: always
  - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
    when: always
  artifacts:
    reports:
      dotenv: stableversion.env
  script:
  # Determine new stable version from website docs.
  # If we stop to use docusaurus we have to determine this value by another way
    - STABLE_VERSION=$(jq '.[1]' gitlab-pages/website/versions.json | tr -d '"')
    - echo "STABLE_VERSION=${STABLE_VERSION}" >> stableversion.env

release:
  stage: push
  image: registry.gitlab.com/gitlab-org/release-cli
  rules:
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]+/'
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  dependencies:
    - docker_extract
    - changelog
    - initialize-git
  ## FIXME find a better solution to upload the binary
  artifacts:
    expire_in: 1000 yrs
    paths:
      - ligo
      - ligo.deb
      - highlighting
    reports:
      dotenv: releaseCiJobId.env
  script:
    - |
      if [[ $DRY_RUN_RELEASE == "" ]]; then
        release-cli create \
          --name "Release $CI_COMMIT_TAG" \
          --description "$(cat release-notes.md)" \
          --assets-link '{"name": "Static Linux binary", "url": "'"$CI_PROJECT_URL"'/-/jobs/'"$CI_JOB_ID"'/artifacts/raw/ligo"}' \
          --assets-link '{"name": "deb package", "url": "'"$CI_PROJECT_URL"'/-/jobs/'"$CI_JOB_ID"'/artifacts/raw/ligo.deb"}' \
          --assets-link '{"name": "jsligo configuration", "url": "'"$CI_PROJECT_URL"'/-/jobs/'"$CI_JOB_ID"'/highlighting/vscode/jsligo.configuration.json"}' \
          --assets-link '{"name": "jsligo highlighting", "url": "'"$CI_PROJECT_URL"'/-/jobs/'"$CI_JOB_ID"'/highlighting/vscode/jsligo.tmLanguage.json"}' \
          --assets-link '{"name": "mligo configuration", "url": "'"$CI_PROJECT_URL"'/-/jobs/'"$CI_JOB_ID"'/highlighting/vscode/mligo.configuration.json"}' \
          --assets-link '{"name": "mligo highlighting", "url": "'"$CI_PROJECT_URL"'/-/jobs/'"$CI_JOB_ID"'/highlighting/vscode/mligo.tmLanguage.json"}'
      fi
    - echo "RELEASE_CI_JOB_ID=${CI_JOB_ID}" >> releaseCiJobId.env

create_docker_stable_version:
  stage: push
  rules:
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.0/'
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  needs:
    - job: determine_new_stable_version
      artifacts: true
  script:
    - docker pull ligolang/ligo:$STABLE_VERSION
    - |
      if [[ $DRY_RUN_RELEASE == "" ]]; then
        docker tag ligolang/ligo:$STABLE_VERSION ligolang/ligo:stable
        docker push ligolang/ligo:stable
      fi

update_release_metadata:
  extends: .submodule-clone
  stage: push
  tags:
    - docker
  image: node:20.2.0-buster
  rules:
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.0/'
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  needs:
    - job: release
    - job: determine_new_stable_version
      artifacts: true
  before_script:
    # Have to be done here because we are using an image for this job.
    - mkdir ~/.ssh
    - chmod 766 ~/.ssh
    - eval `ssh-agent -s`
    - cat $SSH_PRIVATE_KEY_TOOLKIT  > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan gitlab.com  >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.name 'InfraBot'
    - git config --global user.email 'infra@marigold.dev'
    - apt-get update
    - apt-get install -y --no-install-recommends jq
    - wget https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
  script:
      # git cli initialized in .ci/gitlab-ci.yml. Update release branch metadata
    - |      
      if [[ $DRY_RUN_RELEASE != "" ]]; then
        CI_COMMIT_TAG=${CI_COMMIT_BRANCH#"release/"}
      fi
    - git remote rm origin && git remote add origin "git@gitlab.com:ligolang/ligo.git"
    - git fetch
    - git checkout release/$CI_COMMIT_TAG
    - ./.ci/scripts/release_metadata/edit_release_metadata.sh LAST_RELEASE_VERSION $CI_COMMIT_TAG
    - ./.ci/scripts/release_metadata/edit_release_metadata.sh LAST_TAG_JOB_ID $RELEASE_CI_JOB_ID 
    - ./.ci/scripts/release_metadata/edit_release_metadata.sh LAST_STABLE_VERSION $STABLE_VERSION 
    - git add .ci/.metadata.yml
    - git commit -m "[Bot] Update release metadata $CI_COMMIT_TAG"
    - git push -o ci.variable="TRIGGER_DOC_UPDATE='true'" origin HEAD:release/$CI_COMMIT_TAG

#######################################################################
# Following script is executed when pipeline has executed Tag process
# Related to documentation and web-ide
#######################################################################
initialize-aur-repo:
  stage: pretooling
  script:
    - git clone "ssh://aur@aur.archlinux.org/ligo-bin.git"
  needs:
    - job: initialize-ssh
    - job: initialize-git
  artifacts:
    paths:
      - ligo-bin
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always

generate-homebrew-version:
  stage: pretooling
  needs:
    - job: build_release_env_vars
      artifacts: true
  script:
    - ./.ci/scripts/homebrew/create_new_homebrew_version.sh ${CI_PROJECT_URL} ${CI_PROJECT_ID} ${RELEASE_VERSION}
  artifacts:
    paths:
      - HomebrewFormula
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null) 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always

bottle-ventura-i7:
  stage: pretooling
  variables:
    GIT_STRATEGY: clone
  tags:
    - mac
    - i7
  needs:
    - job: generate-homebrew-version
      artifacts: true
    - job: build_release_env_vars
      artifacts: true
  script:
    - brew install --build-bottle ./HomebrewFormula/ligo.rb --verbose
    - BOTTLE_INFO=$(brew bottle --no-rebuild --force-core-tap ./HomebrewFormula/ligo.rb | grep sha256)
    - |
      curl --header "PRIVATE-TOKEN: ${TOKEN_API}" \
      --upload-file ./ligo--${RELEASE_VERSION}.ventura.bottle.tar.gz \
      "https://gitlab.com/api/v4/projects/12294987/packages/generic/ligo_bottle/current/ligo-${RELEASE_VERSION}.ventura.bottle.tar.gz"
    - echo "BOTTLE_INFO_I7=${BOTTLE_INFO}" >> bottle_hash_i7.env
  after_script:
    - brew uninstall ligo || true
    # Remove cache in case of rebuild of the bottle
    - rm -rf ~/Library/Caches/Homebrew/ligo--git || true
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null) 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  artifacts:
    reports:
      dotenv: 
        - bottle_hash_i7.env

bottle-ventura-m1:
  stage: pretooling
  variables:
    GIT_STRATEGY: clone
  tags:
    - mac
    - m1
  needs:
    - job: generate-homebrew-version
      artifacts: true
    - job: build_release_env_vars
      artifacts: true
  script:
    - brew install --build-bottle ./HomebrewFormula/ligo.rb --verbose
    - BOTTLE_INFO=$(brew bottle --no-rebuild --force-core-tap ./HomebrewFormula/ligo.rb | grep sha256)
    - |
      curl --header "PRIVATE-TOKEN: ${TOKEN_API}" \
      --upload-file ./ligo--${RELEASE_VERSION}.arm64_ventura.bottle.tar.gz \
      "https://gitlab.com/api/v4/projects/12294987/packages/generic/ligo_bottle/current/ligo-${RELEASE_VERSION}.arm64_ventura.bottle.tar.gz"
    - echo "BOTTLE_INFO_M1=${BOTTLE_INFO}" >> bottle_hash_m1.env
  after_script:
    - brew uninstall ligo || true
    # Remove cache in case of rebuild of the bottle
    - rm -rf ~/Library/Caches/Homebrew/ligo--git || true
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null) 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  artifacts:
    reports:
      dotenv: 
        - bottle_hash_m1.env

update-bottle-reference:
  stage: pretooling
  needs:
      - job: bottle-ventura-i7
        artifacts: true
      - job: bottle-ventura-m1
        artifacts: true
      - job: build_release_env_vars
        artifacts: true
      - job: generate-homebrew-version
        artifacts: true
  script:
    - ./.ci/scripts/homebrew/replace_bottle_reference.sh
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null) 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  artifacts:
    paths:
      - HomebrewFormula

update-ligo-bin-PKGBUILD:
  stage: pretooling
  script:
    - LAST_TAG_JOB_ID=`./.ci/scripts/release_metadata/read_release_metadata.sh LAST_TAG_JOB_ID`
    - ./.ci/scripts/AUR/create_new_pkgbuild_version.sh https://gitlab.com/ligolang/ligo/-/jobs/$LAST_TAG_JOB_ID/artifacts/raw/ligo.deb $RELEASE_VERSION
    - cp ./.ci/scripts/AUR/ligo.PKGBUILD ./ligo-bin/PKGBUILD
  needs:
    - job: initialize-aur-repo
      artifacts: true
    - job: build_release_env_vars
      artifacts: true
  artifacts:
    paths:
      - ligo-bin
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always

create-AUR-package:
  stage: tooling
  tags:
    - docker
  image: archlinux:base-devel
  script: 
    - useradd -m ligo-user
    - chmod -R 777 .
    - chmod +x /home/ligo-user
    - cd ligo-bin
    - su ligo-user -c "makepkg --printsrcinfo" > .SRCINFO
    - cd ..
  needs:
    - job: update-ligo-bin-PKGBUILD
      artifacts: true
  artifacts:
    paths:
      - ligo-bin
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always

calculate_nix_SRI:
  stage: tooling
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null) 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always
  script: 
    - LAST_TAG_JOB_ID=`./.ci/scripts/release_metadata/read_release_metadata.sh LAST_TAG_JOB_ID`
    - BINARY_GITLAB_ARTIFACT_URL="https://gitlab.com/ligolang/ligo/-/jobs/$LAST_TAG_JOB_ID/artifacts/raw/ligo"
    - SRI_LIGO_BINARY_HASH=$(nix --extra-experimental-features nix-command hash to-sri --type sha256 $(nix-prefetch-url --type sha256 --quiet $BINARY_GITLAB_ARTIFACT_URL))
    - echo "SRI_LIGO_BINARY_HASH=${SRI_LIGO_BINARY_HASH}" >> nixSriLigoBinary.env
  artifacts:
    reports:
      dotenv: nixSriLigoBinary.env

update-repository-status:
  stage: tooling
  tags:
    - docker
  image: node:20.2.0-buster
  before_script:
    # Have to be done here because we are using an image for this job.
    - mkdir ~/.ssh
    - chmod 766 ~/.ssh
    - eval `ssh-agent -s`
    - cat $SSH_PRIVATE_KEY_TOOLKIT  > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan gitlab.com  >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.name 'InfraBot'
    - git config --global user.email 'infra@marigold.dev'
    - apt-get update
    - apt-get install -y --no-install-recommends jq
    - wget https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
  script:
    - git submodule sync --recursive                       
    - git submodule update --init --recursive --remote --force
    - git remote rm origin && git remote add origin "git@gitlab.com:ligolang/ligo.git"
    - node scripts/manpages/manpages.js ./ligo
    - ./.ci/scripts/versioning_website.sh $RELEASE_VERSION
    - LAST_TAG_JOB_ID=`./.ci/scripts/release_metadata/read_release_metadata.sh LAST_TAG_JOB_ID`
    - ./.ci/scripts/update_distribution_references_with_release.sh $LAST_TAG_JOB_ID $RELEASE_VERSION $SRI_LIGO_BINARY_HASH
    - git add tools/webide-new/ligo-webide-backend/Dockerfile vendors/tezos-ligo HomebrewFormula/ gitlab-pages/docs/tutorials/. gitlab-pages/docs/intro/installation.md gitlab-pages/website/versioned_docs/. gitlab-pages/website/versioned_sidebars/. gitlab-pages/website/versions.json gitlab-pages/docs/manpages
    - git commit -m "[Bot] Docs $RELEASE_VERSION"
    - git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
  needs:
    - job: docker_extract
    - job: calculate_nix_SRI
    - job: initialize-ssh
    - job: initialize-git
    - job: update-bottle-reference
      artifacts: true
    - job: build_release_env_vars
      artifacts: true
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null) 
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always

create-doc-update-MR:
  stage: tooling
  script:
    - HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} PRIVATE_TOKEN=${TOKEN_API} ./.ci/scripts/auto_merge_request.sh
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always
    - if: ($CI_COMMIT_BRANCH =~ /^release/ && $DRY_RUN_RELEASE != null)
      when: always

publish-AUR-package:
  stage: push
  script:
    - cd ligo-bin
    - git remote rm origin && git remote add origin ssh://aur@aur.archlinux.org/ligo-bin.git
    - git add PKGBUILD .SRCINFO
    - git status
    - git commit -am "[Bot] Update Ligo pkg version [ $RELEASE_VERSION ]"
    - git push origin master
  needs:
    - job: create-AUR-package
      artifacts: true
    - job: build_release_env_vars
      artifacts: true
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always


#######################################################################
# Following script is executed when pipeline has executed Tag process
# Related to the update nixpkg https://github.com/NixOS/nixpkgs
#######################################################################

publish-nixpkg:
  stage: push
  script:
    - git clone "https://github.com/NixOS/nixpkgs.git"
    - PRECEDENT_LIGO_VERSION_NIX=$(.ci/scripts/nix/retrieve_version.sh nixpkgs/pkgs/development/compilers/ligo/default.nix)
    - .ci/scripts/nix/update_ligo_default_nix_file.sh nixpkgs/pkgs/development/compilers/ligo/default.nix $RELEASE_VERSION
    - cd nixpkgs
    - git remote rm origin && git remote add origin https://ligolangbot:${GITLAB_LIGO_PUBLIC_REPO_TOKEN}@github.com/ligolang/nixpkgs.git
    - git add pkgs/development/compilers/ligo/default.nix
    - git status
    - "git commit -am \"ligo: ${PRECEDENT_LIGO_VERSION_NIX} -> ${RELEASE_VERSION}\""
    - git push -u origin master:$(../.ci/scripts/nix/generate_nixpkgs_branch_name.sh $RELEASE_VERSION)
    - ../.ci/scripts/nix/generate_pr.sh "ligolang:$(../.ci/scripts/nix/generate_nixpkgs_branch_name.sh $RELEASE_VERSION)" $PRECEDENT_LIGO_VERSION_NIX $RELEASE_VERSION $GITLAB_LIGO_PUBLIC_REPO_TOKEN
    - MESSAGE="New pull request to update ligo has been generated on https://github.com/NixOS/nixpkgs"
  # U01MBUD7YG6 = Ulrik who is owner of nixpkgs and can merge PR
    - "curl -d \"text=${MESSAGE}\" -d 'channel=U01MBUD7YG6' -H \"Authorization: Bearer ${SLACK_LIGO_ALERTER_TOKEN}\" -X POST https://slack.com/api/chat.postMessage --trace-ascii /dev/stdout"
    - "curl -d \"text=${MESSAGE}\" -d 'channel=U02LTGFM85S' -H \"Authorization: Bearer ${SLACK_LIGO_ALERTER_TOKEN}\" -X POST https://slack.com/api/chat.postMessage --trace-ascii /dev/stdout"
  needs:
    - job: build_release_env_vars
      artifacts: true
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always 


#######################################################################
# Following script is executed when pipeline has executed Tag process
# Related to the update of Gitpod
#######################################################################

update-gitpod-ligo-version:
  stage: tooling
  variables:
    RELEASE_VERSION: "${RELEASE_VERSION}"
  trigger: 
    project: ligolang/template-ligo
  needs:
    - job: build_release_env_vars
      artifacts: true
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always 
